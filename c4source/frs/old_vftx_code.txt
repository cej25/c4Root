// Old VFTX stuff - can be added back in if the VFTX crate ever gets sorted
// but for now it is complete clutter imo, so have removed it entirely from Cal2Hit


/* --------------------------------------------------------------------------*/
    // VFTX start here
    // (moved from Go4 as we need id_a2 and it gets calculated twice otherwise?)
    /* --------------------------------------------------------------------------*/
    //c4LOG(info,"EXEC VFTX");

    if (multVFTX > 0)
    {
        TRaw_vftx = fCalHitVFTX->Get_TRaw_vftx();

        // loop over 21 or 22 size, check 41l/r are not empty
        for (int i = 0; i < TRaw_vftx[0].size(); i++)
        {   
            // 2141
            if (TRaw_vftx[4].size() != 0)
            {
                vftx_tof2141.emplace_back((0.5 * ((Double_t)TRaw_vftx[4].at(0) + (Double_t)TRaw_vftx[5].at(0)) - 0.5 * ((Double_t)TRaw_vftx[0].at(i) + (Double_t)TRaw_vftx[1].at(i))));
                vftx_tof2141_calib.emplace_back(vftx_tof2141.at(i) / 1000. + sci->vftx_offset_2141);
            }

            // 2142
            if (TRaw_vftx[6].size() != 0)
            {
                vftx_tof2142.emplace_back((0.5 * ((Double_t)TRaw_vftx[6].at(0) + (Double_t)TRaw_vftx[7].at(0)) - 0.5 * ((Double_t)TRaw_vftx[0].at(i) + (Double_t)TRaw_vftx[1].at(i))));
                vftx_tof2142_calib.emplace_back(vftx_tof2142.at(i) / 1000. + sci->vftx_offset_2142);
        
            }
        }

        for (int i = 0; i < TRaw_vftx[2].size(); i++)
        {
            // 2241
            if (TRaw_vftx[4].size() != 0)
            {
                vftx_tof2241.emplace_back((0.5 * ((Double_t)TRaw_vftx[4].at(0) + (Double_t)TRaw_vftx[5].at(0)) - 0.5 * ((Double_t)TRaw_vftx[2].at(i) + (Double_t)TRaw_vftx[3].at(i))));
                vftx_tof2241_calib.emplace_back(vftx_tof2241.at(i) / 1000. + sci->vftx_offset_2241);
            }

            // 2242
            if (TRaw_vftx[6].size() != 0)
            {
                vftx_tof2242.emplace_back((0.5 * ((Double_t)TRaw_vftx[6].at(0) + (Double_t)TRaw_vftx[7].at(0)) - 0.5 * ((Double_t)TRaw_vftx[2].at(i) + (Double_t)TRaw_vftx[3].at(i))));
                vftx_tof2242_calib.emplace_back(vftx_tof2242.at(i) / 1000. + sci->vftx_offset_2242);
            }
        }

        /*
        temp_s4x = -999.;
        if (b_tpc_xy[4] && b_tpc_xy[5])
        {
            temp_s4x = fCalHitTPC->Get_tpc_x_s4();
        }*/

        float temp_sci21x = -999.;
        if (id->vftx_s2pos_option == 1)
        {
            // do nothing?
        }
        else if (id->vftx_s2pos_option == 2)
        {
            if (b_tpc_xy[0] && b_tpc_xy[1])
            {
                temp_sci21x = fCalHitTPC->Get_tpc_x_s2_foc_21_22();
            }
            else if (b_tpc_xy[2] && b_tpc_xy[3])
            {
                temp_sci21x = fCalHitTPC->Get_tpc_x_s2_foc_23_24();
            }
            else if (b_tpc_xy[1] && b_tpc_xy[3])
            {
                temp_sci21x = fCalHitTPC->Get_tpc_x_s2_foc_22_24();
            }
        }
        
        // number of 21l hits
        for (int i = 0; i < TRaw_vftx[0].size(); i++)
        {
            id_vftx_beta_2141.emplace_back((id->vftx_length_2141 / vftx_tof2141_calib.at(i)) / speed_light);
            id_vftx_beta_2142.emplace_back((id->vftx_length_2142 / vftx_tof2142_calib.at(i)) / speed_light);
            id_vftx_gamma_2141.emplace_back(1. / sqrt(1. - id_vftx_beta_2141.at(i) * id_vftx_beta_2141.at(i)));
            id_vftx_gamma_2142.emplace_back(1. / sqrt(1. - id_vftx_beta_2142.at(i) * id_vftx_beta_2142.at(i)));

            if (temp_s4x > -200. && temp_s4x < 200. && temp_sci21x > -200. && temp_sci21x < 200)
            {
                id_vftx_delta_24 = (temp_s4x - (temp_sci21x * frs->magnification[1])) / (-1.0 * frs->dispersion[1] * 1000.0);
                if (id_vftx_beta_2141.at(i) > 0.0 && id_vftx_beta_2141.at(i) < 1.0)
                {
                    id_vftx_aoq_2141.emplace_back(mean_brho_s2s4 * (1. + id_vftx_delta_24) * temp_tm_to_MeV / (temp_mu * id_vftx_beta_2141.at(i) * id_vftx_gamma_2141.at(i)));
                    id_vftx_aoq_corr_2141.emplace_back(id_vftx_aoq_2141.at(i) - id->a2AoQCorr * id_a2);
                }
                if (id_vftx_beta_2142.at(i) > 0.0 && id_vftx_beta_2142.at(i) < 1.0)
                {
                    id_vftx_aoq_2142.emplace_back(mean_brho_s2s4 * (1. + id_vftx_delta_24) * temp_tm_to_MeV / (temp_mu * id_vftx_beta_2142.at(i) * id_vftx_gamma_2142.at(i)));
                    id_vftx_aoq_corr_2142.emplace_back(id_vftx_aoq_2142.at(i) - id->a2AoQCorr * id_a2);
                }
            }

            if ((de[0] > 0.0) && (id_vftx_beta_2141.at(i) > 0.0) && (id_vftx_beta_2141.at(i) < 1.0))
            {
                power = 1.;
                sum = 0.;
                for (int j = 0; j < 4; j++)
                {
                    sum += power * id->vftx_vel_a_music41[j];
                    power *= id_vftx_beta_2141.at(i);
                }

                id_vftx_vcor_2141.emplace_back(sum);
                
                if (id_vftx_vcor_2141.at(i) > 0.0)
                {
                    id_vftx_z_2141.emplace_back(frs->primary_z * sqrt(de[0] / id_vftx_vcor_2141.at(i)));
                    id_vftx_z2_2141.emplace_back(frs->primary_z * sqrt(de[1] / id_vftx_vcor_2141.at(i)));
                }
            }

            if ((de[0] > 0.0) && (id_vftx_beta_2142.at(i) > 0.0) && (id_vftx_beta_2142.at(i) < 1.0))
            {
                power = 1.;
                sum = 0.;
                for (int j = 0; j < 4; j++)
                {
                    sum += power * id->vftx_vel_a_music41[j];
                    power *= id_vftx_beta_2142.at(i);
                }

                id_vftx_vcor_2142.emplace_back(sum);

                if (id_vftx_vcor_2142.at(i) > 0.0)
                {
                    id_vftx_z_2142.emplace_back(frs->primary_z * sqrt(de[0] / id_vftx_vcor_2142.at(i)));
                    id_vftx_z2_2142.emplace_back(frs->primary_z * sqrt(de[1] / id_vftx_vcor_2142.at(i)));
                }
            }

        }

        // number of 22l hits
        for (int i = 0; i < TRaw_vftx[2].size(); i++)
        {
            id_vftx_beta_2241.emplace_back((id->vftx_length_2241 / vftx_tof2241_calib.at(i)) / speed_light);
            id_vftx_beta_2242.emplace_back((id->vftx_length_2242 / vftx_tof2242_calib.at(i)) / speed_light);
            id_vftx_gamma_2241.emplace_back(1. / sqrt(1. - id_vftx_beta_2241.at(i) * id_vftx_beta_2241.at(i)));
            id_vftx_gamma_2242.emplace_back(1. / sqrt(1. - id_vftx_beta_2242.at(i) * id_vftx_beta_2242.at(i)));

            if (temp_s4x > -200. && temp_s4x < 200. && temp_sci21x > -200. && temp_sci21x < 200)
            {
                id_vftx_delta_24 = (temp_s4x - (temp_sci21x * frs->magnification[1])) / (-1.0 * frs->dispersion[1] * 1000.0);
                if (id_vftx_beta_2241.at(i) > 0.0 && id_vftx_beta_2241.at(i) < 1.0)
                {
                    id_vftx_aoq_2241.emplace_back(mean_brho_s2s4 * (1. + id_vftx_delta_24) * temp_tm_to_MeV / (temp_mu * id_vftx_beta_2241.at(i) * id_vftx_gamma_2241.at(i)));
                    id_vftx_aoq_corr_2241.emplace_back(id_vftx_aoq_2241.at(i) - id->a2AoQCorr * id_a2);
                }
                if (id_vftx_beta_2242.at(i) > 0.0 && id_vftx_beta_2242.at(i) < 1.0)
                {
                    id_vftx_aoq_2242.emplace_back(mean_brho_s2s4 * (1. + id_vftx_delta_24) * temp_tm_to_MeV / (temp_mu * id_vftx_beta_2242.at(i) * id_vftx_gamma_2242.at(i)));
                    id_vftx_aoq_corr_2242.emplace_back(id_vftx_aoq_2242.at(i) - id->a2AoQCorr * id_a2);
                }
            }

            if ((de[0] > 0.0) && (id_vftx_beta_2241.at(i) > 0.0) && (id_vftx_beta_2241.at(i) < 1.0))
            {
                power = 1.;
                sum = 0.;
                for (int j = 0; j < 4; j++)
                {
                    sum += power * id->vftx_vel_a_music41[j];
                    power *= id_vftx_beta_2241.at(i);
                }

                id_vftx_vcor_2241.emplace_back(sum);

                if (id_vftx_vcor_2241.at(i) > 0.0)
                {
                    id_vftx_z_2241.emplace_back(frs->primary_z * sqrt(de[0] / id_vftx_vcor_2241.at(i)));
                    id_vftx_z2_2241.emplace_back(frs->primary_z * sqrt(de[1] / id_vftx_vcor_2241.at(i)));
                }
            }

            if ((de[0] > 0.0) && (id_vftx_beta_2242.at(i) > 0.0) && (id_vftx_beta_2242.at(i) < 1.0))
            {
                power = 1.;
                sum = 0.;
                for (int j = 0; j < 4; j++)
                {
                    sum += power * id->vftx_vel_a_music41[j];
                    power *= id_vftx_beta_2242.at(i);
                }

                id_vftx_vcor_2242.emplace_back(sum);

                if (id_vftx_vcor_2242.at(i) > 0.0)
                {
                    id_vftx_z_2242.emplace_back(frs->primary_z * sqrt(de[0] / id_vftx_vcor_2242.at(i)));
                    id_vftx_z2_2242.emplace_back(frs->primary_z * sqrt(de[1] / id_vftx_vcor_2242.at(i)));
                }
            }

        }

        // CEJ: Set outputs here later

    } // if vftx has data??
    
    /*----------------------------------------------------------*/
    /* End of VFTX  */
    /*----------------------------------------------------------*/


    const std::vector<uint32_t>* TRaw_vftx;

        std::vector<Float_t> vftx_tof2141;
        std::vector<Float_t> vftx_tof2141_calib;
        std::vector<Float_t> vftx_tof2241;
        std::vector<Float_t> vftx_tof2241_calib;
        std::vector<Float_t> vftx_tof2142;
        std::vector<Float_t> vftx_tof2142_calib;
        std::vector<Float_t> vftx_tof2242;
        std::vector<Float_t> vftx_tof2242_calib;

        std::vector<Float_t> id_vftx_beta_2141;
        std::vector<Float_t> id_vftx_gamma_2141;
        std::vector<Float_t> id_vftx_aoq_2141;
        std::vector<Float_t> id_vftx_aoq_corr_2141;
        std::vector<Float_t> id_vftx_z_2141;
        std::vector<Float_t> id_vftx_z2_2141;
        std::vector<Float_t> id_vftx_vcor_2141;
        std::vector<Float_t> id_vftx_beta_2241;
        std::vector<Float_t> id_vftx_gamma_2241;
        std::vector<Float_t> id_vftx_aoq_2241;
        std::vector<Float_t> id_vftx_aoq_corr_2241;
        std::vector<Float_t> id_vftx_z_2241;
        std::vector<Float_t> id_vftx_z2_2241;
        std::vector<Float_t> id_vftx_vcor_2241;
        std::vector<Float_t> id_vftx_beta_2142;
        std::vector<Float_t> id_vftx_gamma_2142;
        std::vector<Float_t> id_vftx_aoq_2142;
        std::vector<Float_t> id_vftx_aoq_corr_2142;
        std::vector<Float_t> id_vftx_z_2142;
        std::vector<Float_t> id_vftx_z2_2142;
        std::vector<Float_t> id_vftx_vcor_2142;
        std::vector<Float_t> id_vftx_beta_2242;
        std::vector<Float_t> id_vftx_gamma_2242;
        std::vector<Float_t> id_vftx_aoq_2242;
        std::vector<Float_t> id_vftx_aoq_corr_2242;
        std::vector<Float_t> id_vftx_z_2242;
        std::vector<Float_t> id_vftx_z2_2242;
        std::vector<Float_t> id_vftx_vcor_2242;
        Float_t id_vftx_delta_24;




// ---- * VFTX Crate * ---- //
    folder_raw_vftx_vftx_hists = new TFolder("VFTX Histograms", "VFTX Histograms");
    folder_frs_raw_vftx_hists->Add(folder_raw_vftx_vftx_hists);

    // Geo = ?? VFTX TDC. Should we used VFTX_N? Only one module..
    c_vftx_lead_mult = new TCanvas("c_vftx_lead_mult", "VFTX Lead Multiplciity", 650, 350);
    c_vftx_lead_mult->Divide(4, 4);
    for (int ihist = 0; ihist < VFTX_MAX_CHN; ihist++)
    {
        c_vftx_lead_mult->cd(ihist+1);
        h1_vftx_vftx_lead_mult[ihist] = new TH1I(Form("h1_vftx_vftx_lead_%i_mult", ihist), Form("VFTX Lead Multiplicity - Channel %i", ihist), VFTX_MAX_HITS, 0, VFTX_MAX_HITS);
        h1_vftx_vftx_lead_mult[ihist]->Draw();
        folder_raw_vftx_vftx_hists->Add(h1_vftx_vftx_lead_mult[ihist]);
    }
    c_vftx_lead_mult->cd(0);
    folder_raw_vftx_vftx_hists->Add(c_vftx_lead_mult);

    c_vftx_trail_mult = new TCanvas("c_vftx_trail_mult", "VFTX Trail Multiplcity", 650, 350);
    c_vftx_trail_mult->Divide(4, 4);
    for (int ihist = 0; ihist < VFTX_MAX_CHN; ihist++)
    {
        c_vftx_trail_mult->cd(ihist+1);
        h1_vftx_vftx_trail_mult[ihist] = new TH1I(Form("h1_vftx_vftx_trail_%i_mult", ihist), Form("VFTX Trail Multiplicity - Channel %i", ihist), VFTX_MAX_HITS, 0, VFTX_MAX_HITS);
        h1_vftx_vftx_trail_mult[ihist]->Draw();
        folder_raw_vftx_vftx_hists->Add(h1_vftx_vftx_trail_mult[ihist]);
    }
    c_vftx_trail_mult->cd(0);
    folder_raw_vftx_vftx_hists->Add(c_vftx_trail_mult);

    c_vftx_lead_cc = new TCanvas("c_vftx_lead_cc", "VFTX Lead Coarse Times", 650, 350);
    c_vftx_lead_cc->Divide(4, 4);
    for (int ihist = 0; ihist < VFTX_MAX_CHN; ihist++)
    {
        c_vftx_lead_cc->cd(ihist+1);
        h1_vftx_vftx_lead_cc[ihist] = new TH1I(Form("h1_vftx_vftx_lead_%i_cc", ihist), Form("VFTX Clock (Leading) - Channel %i", ihist), 9000, 0., 9000.);
        h1_vftx_vftx_lead_cc[ihist]->Draw();
        folder_raw_vftx_vftx_hists->Add(h1_vftx_vftx_lead_cc[ihist]);
    }
    c_vftx_lead_cc->cd(0);
    folder_raw_vftx_vftx_hists->Add(c_vftx_lead_cc);

    c_vftx_lead_ft = new TCanvas("c_vftx_lead_ft", "VFTX Lead Fine Times", 650, 350);
    c_vftx_lead_ft->Divide(4, 4);
    for (int ihist = 0; ihist < VFTX_MAX_CHN; ihist++)
    {
        c_vftx_lead_ft->cd(ihist+1);
        h1_vftx_vftx_lead_ft[ihist] = new TH1I(Form("h1_vftx_vftx_lead_%i_ft", ihist), Form("VFTX FineTime (Leading) - Channel %i", ihist), 1000, 0., 1000.);
        h1_vftx_vftx_lead_ft[ihist]->Draw();
        folder_raw_vftx_vftx_hists->Add(h1_vftx_vftx_lead_ft[ihist]);
    }
    c_vftx_lead_ft->cd(0);
    folder_raw_vftx_vftx_hists->Add(c_vftx_lead_ft);

    c_vftx_lead_time = new TCanvas("c_vftx_lead_time", "VFTX Lead Times", 650, 350);
    c_vftx_lead_time->Divide(4, 4);
    for (int ihist = 0; ihist < VFTX_MAX_CHN; ihist++)
    {
        c_vftx_lead_time->cd(ihist+1);
        h1_vftx_vftx_lead_time[ihist] = new TH1I(Form("h1_vftx_vftx_lead_%i_time", ihist), Form("VFTX Leading Time (ps) - Channel %i", ihist), 1000, 0., 1000.);
        h1_vftx_vftx_lead_time[ihist]->Draw();
        folder_raw_vftx_vftx_hists->Add(h1_vftx_vftx_lead_time[ihist]);
    }
    c_vftx_lead_time->cd(0);
    folder_raw_vftx_vftx_hists->Add(c_vftx_lead_time);

    c_vftx_trail_cc = new TCanvas("c_vftx_trail_cc", "VFTX Trail Coarse Times", 650, 350);
    c_vftx_trail_cc->Divide(4, 4);
    for (int ihist = 0; ihist < VFTX_MAX_CHN; ihist++)
    {
        c_vftx_trail_cc->cd(ihist+1);
        h1_vftx_vftx_trail_cc[ihist] = new TH1I(Form("h1_vftx_vftx_trail_%i_cc", ihist), Form("VFTX Clock (Trailing) - Channel %i", ihist), 9000, 0., 9000.);
        h1_vftx_vftx_trail_cc[ihist]->Draw();
        folder_raw_vftx_vftx_hists->Add(h1_vftx_vftx_trail_cc[ihist]);
    }
    c_vftx_trail_cc->cd(0);
    folder_raw_vftx_vftx_hists->Add(c_vftx_trail_cc);

    c_vftx_trail_ft = new TCanvas("c_vftx_trail_ft", "VFTX Trail Fine Times", 650, 350);
    c_vftx_trail_ft->Divide(4, 4);
    for (int ihist = 0; ihist < VFTX_MAX_CHN; ihist++)
    {
        c_vftx_trail_ft->cd(ihist+1);
        h1_vftx_vftx_trail_ft[ihist] = new TH1I(Form("h1_vftx_vftx_trail_%i_ft", ihist), Form("VFTX FineTime (Trailing) - Channel %i", ihist), 1000, 0., 1000.);
        h1_vftx_vftx_trail_ft[ihist]->Draw();
        folder_raw_vftx_vftx_hists->Add(h1_vftx_vftx_trail_ft[ihist]);
    }
    c_vftx_trail_ft->cd(0);
    folder_raw_vftx_vftx_hists->Add(c_vftx_trail_ft);

    c_vftx_trail_time = new TCanvas("c_vftx_trail_time", "VFTX Trail Times", 650, 350);
    c_vftx_trail_time->Divide(4, 4);
    for (int ihist = 0; ihist < VFTX_MAX_CHN; ihist++)
    {
        c_vftx_trail_time->cd(ihist+1);
        h1_vftx_vftx_trail_time[ihist] = new TH1I(Form("h1_vftx_vftx_trail_%i_time", ihist), Form("VFTX Trailing Time (ps) - Channel %i", ihist), 1000, 0., 1000.);
        h1_vftx_vftx_trail_time[ihist]->Draw();
        folder_raw_vftx_vftx_hists->Add(h1_vftx_vftx_trail_time[ihist]);
    }
    c_vftx_trail_time->cd(0);
    folder_raw_vftx_vftx_hists->Add(c_vftx_trail_time);

    c_vftx_lead_refch0 = new TCanvas("c_vftx_lead_refch0", "VFTX Lead Time - Ref Channel 0", 650, 350);
    c_vftx_lead_refch0->Divide(4, 4);
    for (int ihist = 0; ihist < VFTX_MAX_CHN; ihist++)
    {
        c_vftx_lead_refch0->cd(ihist+1);
        h1_vftx_vftx_lead_time_ref_ch0[ihist] = new TH1I(Form("h1_vftx_vftx_lead_time_%i_ref_ch0", ihist), Form("VFTX Time Difference (Ref Channel 0) - Channel %i", ihist), 20000, -10000., 10000.);
        h1_vftx_vftx_lead_time_ref_ch0[ihist]->Draw();
        folder_raw_vftx_vftx_hists->Add(h1_vftx_vftx_lead_time_ref_ch0[ihist]);
    }
    c_vftx_lead_refch0->cd(0);
    folder_raw_vftx_vftx_hists->Add(c_vftx_lead_refch0);

    c_vftx_lead_refch0_vs_event = new TCanvas("c_vftx_lead_refch0_vs_event", "VFTX Lead Time - Reference Channel 0 vs Event", 650, 350);
    c_vftx_lead_refch0_vs_event->Divide(4, 4);
    for (int ihist = 0; ihist < VFTX_MAX_CHN; ihist++)
    {
        c_vftx_lead_refch0_vs_event->cd(ihist+1);
        h2_vftx_vftx_lead_time_ref_ch0_vs_event[ihist] = new TH2I(Form("h2_vftx_vftx_lead_time_%i_ref_ch0_vs_event", ihist), Form("VFTX Time Difference (Ref Channel 0) vs Event - Channel %i", ihist), 400, 0, 4000000, 2000, -10000., 10000.);
        h2_vftx_vftx_lead_time_ref_ch0_vs_event[ihist]->Draw();
        folder_raw_vftx_vftx_hists->Add(h2_vftx_vftx_lead_time_ref_ch0_vs_event[ihist]);
    }
    c_vftx_lead_refch0_vs_event->cd(0);
    folder_raw_vftx_vftx_hists->Add(c_vftx_lead_refch0_vs_event);

    c_vftx_lead_refch8_vs_event = new TCanvas("c_vftx_lead_refch8_vs_event", "VFTX Lead Time - Reference Channel 8 vs Event", 650, 350);
    c_vftx_lead_refch8_vs_event->Divide(4, 4);
    for (int ihist = 0; ihist < VFTX_MAX_CHN; ihist++)
    {
        c_vftx_lead_refch8_vs_event->cd(ihist+1);
        h2_vftx_vftx_lead_time_ref_ch8_vs_event[ihist] = new TH2I(Form("h2_vftx_vftx_lead_time_%i_ref_ch8_vs_event", ihist), Form("VFTX Time Difference (Ref Channel 8) vs Event - Channel %i", ihist), 400, 0, 4000000, 2000, -10000., 10000.);
        h2_vftx_vftx_lead_time_ref_ch8_vs_event[ihist]->Draw();
        folder_raw_vftx_vftx_hists->Add(h2_vftx_vftx_lead_time_ref_ch8_vs_event[ihist]);
    }
    c_vftx_lead_refch8_vs_event->cd(0);
    folder_raw_vftx_vftx_hists->Add(c_vftx_lead_refch8_vs_event);

    h2_vftx_vftx_lead_time_ch0vs4 = new TH2I("h2_vftx_vftx_lead_time_ch0vs4", "VFTX Lead Time Channel 0 vs Channel 4", 1000, 0., 100000., 1000, 0., 100000.);
    folder_raw_vftx_vftx_hists->Add(h2_vftx_vftx_lead_time_ch0vs4);
    // ----------------------- //




     /* ---- VFTX Crate ---- */
    if (fFrsVFTXArray && fFrsVFTXArray->GetEntriesFast() > 0)
    {
        Int_t nHits = fFrsVFTXArray->GetEntriesFast();
        for (Int_t ihit = 0; ihit < nHits; ihit++)
        {   
            fHitFrsVFTXRaw = (FrsVFTXData*)fFrsVFTXArray->At(ihit);
            if (!fHitFrsVFTXRaw) continue;

            std::vector<uint32_t>* vftx_leading_cc = fHitFrsVFTXRaw->Get_vftx_leading_cc();
            std::vector<uint32_t>* vftx_leading_ft = fHitFrsVFTXRaw->Get_vftx_leading_ft();
            std::vector<uint32_t>* vftx_leading_time = fHitFrsVFTXRaw->Get_vftx_leading_time();
            std::vector<uint32_t>* vftx_trailing_cc = fHitFrsVFTXRaw->Get_vftx_trailing_cc();
            std::vector<uint32_t>* vftx_trailing_ft = fHitFrsVFTXRaw->Get_vftx_trailing_ft();
            std::vector<uint32_t>* vftx_trailing_time = fHitFrsVFTXRaw->Get_vftx_trailing_time();

            for (int i = 0; i < VFTX_MAX_CHN; i++)
            {   
                h1_vftx_vftx_lead_mult[i]->Fill(vftx_leading_time[i].size());
                for (int j = 0; j < vftx_leading_time[i].size(); j++)
                {   
                    h1_vftx_vftx_lead_cc[i]->Fill(vftx_leading_cc[i].at(j));
                    h1_vftx_vftx_lead_ft[i]->Fill(vftx_leading_ft[i].at(j));
                    h1_vftx_vftx_lead_time[i]->Fill(vftx_leading_time[i].at(j));
                    // h1_vftx_vftx_lead_time_ref_ch0[i]->Fill(vftx_leading_time[i].at(j) - vftx_leading_time[0].at(j));
                    // h1_vftx_vftx_lead_time_ref_ch0[i]->Fill(vftx_leading_time[i].at(j) - vftx_leading_time[0].at(j));
                    // h2_vftx_vftx_lead_time_ref_ch0_vs_event[i]->Fill(fNEvents, vftx_leading_time[i].at(j) - vftx_leading_time[0].at(j));
                    // h2_vftx_vftx_lead_time_ref_ch8_vs_event[i]->Fill(fNEvents, vftx_leading_time[i].at(j) - vftx_leading_time[8].at(j));
                }
                h1_vftx_vftx_trail_mult[i]->Fill(vftx_trailing_time[i].size());
                for (int j = 0; j < vftx_trailing_time[i].size(); j++)
                {   
                    h1_vftx_vftx_trail_cc[i]->Fill(vftx_trailing_cc[i].at(j));
                    h1_vftx_vftx_trail_ft[i]->Fill(vftx_trailing_ft[i].at(j));
                    h1_vftx_vftx_trail_time[i]->Fill(vftx_trailing_time[i].at(j));
                }
            }
            // h2_vftx_vftx_lead_time_ch0vs4->Fill();

        } // nHits
    } // VFTX crate

