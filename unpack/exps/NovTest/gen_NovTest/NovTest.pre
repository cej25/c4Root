# 1 "NovTest.spec"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "NovTest.spec"


# 1 "../../common/whiterabbit.spec" 1
TIMESTAMP_WHITERABBIT(id)
{
 MEMBER(DATA12 subsystem_id);
 MEMBER(DATA16 t1);
 MEMBER(DATA16 t2);
 MEMBER(DATA16 t3);
 MEMBER(DATA16 t4);

 UINT32 header NOENCODE {
  0_11: id = MATCH(id);
  12_15: 0;
     16: error_bit;
  17_31: 0;
  ENCODE(subsystem_id, (value=id));
 };
 UINT32 d1 NOENCODE {
  0_15: t1;
  16_31: 0x03e1;
  ENCODE(t1, (value=t1));
 };
 UINT32 d2 NOENCODE {
  0_15: t2;
  16_31: 0x04e1;
  ENCODE(t2, (value=t2));
 };
 UINT32 d3 NOENCODE {
  0_15: t3;
  16_31: 0x05e1;
  ENCODE(t3, (value=t3));
 };
 UINT32 d4 NOENCODE {
  0_15: t4;
  16_31: 0x06e1;
  ENCODE(t4, (value=t4));
 };
}

TIMESTAMP_WHITERABBIT_EXTENDED(id)
{
 MEMBER(DATA16 subsystem_id);
 MEMBER(DATA16 t1);
 MEMBER(DATA16 t2);
 MEMBER(DATA16 t3);
 MEMBER(DATA16 t4);

 UINT32 header NOENCODE {
  0_12: id = MATCH(id);
  13_15: 0;
     16: error_bit;
  17_31: 0;
  ENCODE(subsystem_id, (value=id));
 };
 UINT32 d1 NOENCODE {
  0_15: t1;
  16_31: 0x03e1;
  ENCODE(t1, (value=t1));
 };
 UINT32 d2 NOENCODE {
  0_15: t2;
  16_31: 0x04e1;
  ENCODE(t2, (value=t2));
 };
 UINT32 d3 NOENCODE {
  0_15: t3;
  16_31: 0x05e1;
  ENCODE(t3, (value=t3));
 };
 UINT32 d4 NOENCODE {
  0_15: t4;
  16_31: 0x06e1;
  ENCODE(t4, (value=t4));
 };
}

WR_MULTI()
{
 MEMBER(DATA32 time_hi);
 MEMBER(DATA32 time_lo);

 UINT32 hi NOENCODE {
  0_31: time;
  ENCODE(time_hi, (value = time));
 }
 UINT32 lo NOENCODE {
  0_31: time;
  ENCODE(time_lo, (value = time));
 }
}
# 4 "NovTest.spec" 2
# 1 "../../common/gsi_tamex4.spec" 1


TAMEX4_HEADER()
{
 MEMBER(DATA16 post_trig_ns[64] NO_INDEX_LIST);
 MEMBER(DATA16 pre_trig_ns[64] NO_INDEX_LIST);
 UINT32 trigger_window NOENCODE {
   0_15: post_trig_ns;
  16_31: pre_trig_ns;

  ENCODE(post_trig_ns APPEND_LIST, (value=post_trig_ns));
  ENCODE(pre_trig_ns APPEND_LIST, (value=pre_trig_ns));
 }

}

TAMEX4_PADDING()
{
 UINT32 padding NOENCODE {
   0_11: counter;
  12_19: index;
  20_31: 0xadd;
 }
}

TAMEX4_TIME_DATA(sfp, card, time_coarse, time_fine, time_edge, time_channel, time_epoch)
{
 MEMBER(DATA12 time_coarse[512] NO_INDEX_LIST);
 MEMBER(DATA12 time_fine[512] NO_INDEX_LIST);
 MEMBER(DATA12 time_edge[512] NO_INDEX_LIST);
 MEMBER(DATA12 time_channel[512] NO_INDEX_LIST);
 MEMBER(DATA32 time_epoch[512] NO_INDEX_LIST);

 UINT32 data NOENCODE {
   0_10: coarse;
     11: is_leading;

  12_21: fine;
  22_28: channel;
  29_31: type = 0x4;

  ENCODE(time_coarse APPEND_LIST, (value=coarse));
  ENCODE(time_fine APPEND_LIST, (value=fine));
  ENCODE(time_edge APPEND_LIST, (value=is_leading));
  ENCODE(time_channel APPEND_LIST, (value=channel));
  ENCODE(time_epoch APPEND_LIST, (value=0));
 }

}

TAMEX4_EPOCH_DATA(sfp, card, time_coarse, time_fine, time_edge, time_channel, time_epoch)
{
 MEMBER(DATA12 time_coarse[512] NO_INDEX_LIST);
 MEMBER(DATA12 time_fine[512] NO_INDEX_LIST);
 MEMBER(DATA12 time_edge[512] NO_INDEX_LIST);
 MEMBER(DATA12 time_channel[512] NO_INDEX_LIST);
 MEMBER(DATA32 time_epoch[512] NO_INDEX_LIST);

 UINT32 data NOENCODE {
  0_27: epoch;
  28: reserved;
  29_31: 0x3;

  ENCODE(time_coarse APPEND_LIST, (value=0));
  ENCODE(time_fine APPEND_LIST, (value=0));
  ENCODE(time_edge APPEND_LIST, (value=0));
  ENCODE(time_channel APPEND_LIST, (value=0));
  ENCODE(time_epoch APPEND_LIST, (value=epoch));
 }

}

TAMEX4_SFP(sfp, card)
{
    MEMBER(DATA32 event_size);
 MEMBER(DATA12 time_coarse[512] NO_INDEX_LIST);
 MEMBER(DATA12 time_fine[512] NO_INDEX_LIST);
 MEMBER(DATA12 time_edge[512] NO_INDEX_LIST);
 MEMBER(DATA12 time_channel[512] NO_INDEX_LIST);
 MEMBER(DATA32 time_epoch[512] NO_INDEX_LIST);

 UINT32 indicator NOENCODE {
    0_7: 0x34;
   8_11: trigger_type;
  12_15: sfp = MATCH(sfp);
  16_23: card = MATCH(card);
  24_31: 0;
 }

 MATCH_END;

 UINT32 data_size NOENCODE {

  0_31: bytes;

  ENCODE(event_size, (value=bytes));
 }

 UINT32 tdc_header NOENCODE {
   0_15: lec;
     16: buf_no;
  17_19: reserved;
  20_23: trigger_type;
  24_31: 0xaa;
 }

 list (0 <= i < data_size.bytes / 4 - 3) {
  select several {
   time = TAMEX4_TIME_DATA(sfp=sfp, card=card, time_coarse=time_coarse, time_fine=time_fine, time_edge=time_edge, time_channel=time_channel, time_epoch=time_epoch);
   epoch = TAMEX4_EPOCH_DATA(sfp=sfp, card=card, time_coarse=time_coarse, time_fine=time_fine, time_edge=time_edge, time_channel=time_channel, time_epoch=time_epoch);
  }
 }

 UINT32 error_bits NOENCODE {
   0_23: bits;
  24_31: 0xee;
 }

 UINT32 trailer NOENCODE {
  0_15: lec;
  16: buf_no;
  17_19: reserved;
  20_23: trigger_type;
  24_31: 0xbb;
 }
}
# 5 "NovTest.spec" 2
# 1 "../../common/gsi_febex4.spec" 1





FEBEX_PADDING()
{
    UINT32 pads_data NOENCODE
    {
        0_11: counter;
        12_19: index;
        20_31: 0xADD;
    }
}


FEBEX_EVENT(card)
{
 MEMBER(DATA32 event_trigger_time_hi);
 MEMBER(DATA32 event_trigger_time_lo);
    MEMBER(DATA16 hit_pattern);
    MEMBER(DATA32 num_channels_fired);

 MEMBER(DATA8 channel_id[16] ZERO_SUPPRESS);
 MEMBER(DATA16 channel_trigger_time_hi[16] ZERO_SUPPRESS);
 MEMBER(DATA32 channel_trigger_time_lo[16] ZERO_SUPPRESS);

    MEMBER(DATA8 pileup[16]);
 MEMBER(DATA8 overflow[16]);
    MEMBER(DATA8 channel_cfd[16] ZERO_SUPPRESS);
 MEMBER(DATA32 channel_energy[16] ZERO_SUPPRESS);

    UINT32 sumchannel NOENCODE
    {
        0_7: 0x34;
        8_11: trigger_type;
        12_15: sfpnr;
        16_23: card = MATCH(card);
        24_31: 0xFF;

    }

    UINT32 channel_size NOENCODE
    {
        0_1: ignore;
        2_31: size;

        ENCODE(num_channels_fired , (value = size/4 - 1 ));
    }


    UINT32 event_timestamp_hi NOENCODE
    {
        0_15: timestamp_hi;
        16_31: ignore;

        ENCODE(event_trigger_time_hi, (value = timestamp_hi));
    }

    UINT32 event_timestamp_lo NOENCODE
    {
        0_31: timestamp_lo;
        ENCODE(event_trigger_time_lo, (value = timestamp_lo));
    }

    UINT32 hp NOENCODE
    {
        0_15: hp;
        16_31: ignore;

        ENCODE(hit_pattern, (value = hp));
    }

    UINT32 deadbeef NOENCODE
    {
        0_31: 0xDEADBEEF;
    }

    list(0 <= index < (((channel_size.size) / 4) - 1))
    {
        UINT32 channelids NOENCODE{
            0_15: chan_ts_hi;
            16_23: channel_id_bits;
            24_31: 0xF0;

            ENCODE(channel_id[index], (value = channel_id_bits));
            ENCODE(channel_trigger_time_hi[index], (value = chan_ts_hi));
        }
        UINT32 channel_ts NOENCODE
        {
            0_31: chan_ts_lo;
            ENCODE(channel_trigger_time_lo[index], (value = chan_ts_lo));
        }
        UINT32 chan_enrgy NOENCODE
        {
            0_23: chan_energy;
            24_29: TSF;
            30: pileup_flag;
            31: overflow_flag;

            ENCODE(channel_cfd[index], (value = TSF));
            ENCODE(channel_energy[index], (value = chan_energy));
            ENCODE(pileup[index], (value = pileup_flag));
            ENCODE(overflow[index], (value = overflow_flag));
        }
        UINT32 future_use NOENCODE
        {
            0_31: 0x00000000;
        }
    }
}


FEBEX_EVENT_TRACES(card)
{
 MEMBER(DATA32 event_trigger_time_hi);
 MEMBER(DATA32 event_trigger_time_lo);
    MEMBER(DATA16 hit_pattern);
    MEMBER(DATA32 num_channels_fired);

 MEMBER(DATA8 channel_id[16] ZERO_SUPPRESS);
 MEMBER(DATA16 channel_trigger_time_hi[16] ZERO_SUPPRESS);
 MEMBER(DATA32 channel_trigger_time_lo[16] ZERO_SUPPRESS);

    MEMBER(DATA8 pileup[16]);
 MEMBER(DATA8 overflow[16]);
    MEMBER(DATA8 channel_cfd[16] ZERO_SUPPRESS);
 MEMBER(DATA32 channel_energy[16] ZERO_SUPPRESS);

    MEMBER(DATA16 traces[16][10000] ZERO_SUPPRESS);

    UINT32 sumchannel NOENCODE
    {
        0_7: 0x34;
        8_11: trigger_type;
        12_15: sfpnr;
        16_23: board_id = MATCH(card);
        24_31: 0xFF;

    }

    UINT32 channel_size NOENCODE
    {
        0_1: ignore;
        2_31: size;

        ENCODE(num_channels_fired, (value = size/4 - 1 ));
    }


    UINT32 event_timestamp_hi NOENCODE
    {
        0_15: timestamp_hi;
        16_31: ignore;

        ENCODE(event_trigger_time_hi, (value = timestamp_hi));
    }

    UINT32 event_timestamp_lo NOENCODE
    {
        0_31: timestamp_lo;
        ENCODE(event_trigger_time_lo, (value = timestamp_lo));
    }

    UINT32 hp NOENCODE
    {
        0_15: hp;
        16_31: ignore;

        ENCODE(hit_pattern, (value = hp));
    }

    UINT32 deadbeef NOENCODE
    {
        0_31: 0xDEADBEEF;
    }

    if (sumchannel.trigger_type == 1)
    {
        list(0 <= index < (((channel_size.size) / 4) - 1))
        {
            UINT32 channelids NOENCODE{
                0_15: chan_ts_hi;
                16_23: channel_id_bits;
                24_31: 0xF0;

                ENCODE(channel_id[index], (value = channel_id_bits));
                ENCODE(channel_trigger_time_hi[index], (value = chan_ts_hi));
            }
            UINT32 channel_ts NOENCODE
            {
                0_31: chan_ts_lo;
                ENCODE(channel_trigger_time_lo[index], (value = chan_ts_lo));
            }
            UINT32 chan_enrgy NOENCODE
            {
                0_23: chan_energy;
                24_29: TSF;
                30: pileup_flag;
                31: overflow_flag;

                ENCODE(channel_cfd[index], (value = TSF));
                ENCODE(channel_energy[index], (value = chan_energy));
                ENCODE(pileup[index], (value = pileup_flag));
                ENCODE(overflow[index], (value = overflow_flag));
            }
            UINT32 future_use NOENCODE
            {
                0_31: 0x00000000;
            }
        }

        list (0 <= i < 16)
        {
            UINT32 header NOENCODE
            {
                0_7: 0x34;
                8_23: other;
                24_31: ch_id;
            }

            UINT32 tracesize NOENCODE
            {
                0_31: size;
            }

            UINT32 tracehead NOENCODE
            {
                0_23: other;
                24_31: head;
            }







            list (0 <= j < (tracesize.size / 4 - 2))
            {

                UINT32 channel_trace NOENCODE
                {
                    0_13: data1;
                    14_15: stuff1;
                    16_29: data2;
                    30_31: stuff2;

                    ENCODE(traces[header.ch_id][2*j+0], (value = data1));
                    ENCODE(traces[header.ch_id][2*j+1], (value = data2));
                }

            }


            UINT32 trace_trailer NOENCODE
            {
                0_23: notused;
                24_31: id = RANGE(0xb0,0xbf);
            }
        }
    }
    else if (sumchannel.trigger_type == 3)
    {



        list (0 <= i < 16)
        {
            UINT32 header NOENCODE
            {
                0_7: 0x34;
                8_23: other;
                24_31: ch_id;
            }

            UINT32 tracesize NOENCODE
            {
                0_31: size;
            }

            UINT32 tracehead NOENCODE
            {
                0_23: other;
                24_31: head;
            }

            UINT32 trace_trailer NOENCODE
            {
                0_23: notused;
                24_31: id = RANGE(0xb0,0xbf);
            }
        }
    }

}
# 6 "NovTest.spec" 2
# 1 "../../../config/NovTest/setup.hh" 1
# 7 "NovTest.spec" 2


external EXT_AIDA();


SUBEVENT(aida_subev)
{

    ts = TIMESTAMP_WHITERABBIT(id=0x700);
    external data = EXT_AIDA();

}


SUBEVENT(febex_subev)
{
    ts = TIMESTAMP_WHITERABBIT(id=0x400);

    select several
    {
        padding = FEBEX_PADDING();
    }
    select several
    {
        data[0] = FEBEX_EVENT(card = 0);
        data[1] = FEBEX_EVENT(card = 1);
        data[2] = FEBEX_EVENT(card = 2);
        data[3] = FEBEX_EVENT(card = 3);
    }
}

SUBEVENT(fatima_tamex_subev)
{
    ts = TIMESTAMP_WHITERABBIT_EXTENDED(id=0x1600);
    trigger_window = TAMEX4_HEADER();
    select several
    {
        padding = TAMEX4_PADDING();
    }
    select several
    {
        tamex[0] = TAMEX4_SFP(sfp=0,card=0);
    }
}

SUBEVENT(plastic_subev)
{
    ts = TIMESTAMP_WHITERABBIT(id=0x500);
    trigger_window = TAMEX4_HEADER();
    select several
    {
        padding = TAMEX4_PADDING();
    }
    select several
    {
        tamex[0] = TAMEX4_SFP(sfp=0,card=0);
        tamex[1] = TAMEX4_SFP(sfp=0,card=1);
        tamex[2] = TAMEX4_SFP(sfp=0,card=2);
    }
}


EVENT
{


    revisit aida = aida_subev(type = 10, subtype = 1, procid = 90, control = 37);
    germanium = febex_subev(type = 10, subtype = 1, procid = 60, control = 20);

    fatima = fatima_tamex_subev(type = 10, subtype = 1, procid = 75, control = 20, subcrate = 0);
    plastic = plastic_subev(type = 10, subtype = 1, procid = 80, control = 20, subcrate = 0);
# 90 "NovTest.spec"
    ignore_unknown_subevent;
};
