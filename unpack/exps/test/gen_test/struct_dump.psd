
/** BEGIN_INPUT_DEFINITION *********************************************
 *
 * All specifications as seen by the parser.
 *
 * Do not edit - automatically generated.
 */

/**********************************************************
 * Dump of all structures:
 */

class BAD_EVENT
{
  DATA8 bad;
} ;
class DUMMY
{
  ;
} ;
class FEBEX_EVENT
{
  DATA8 trig;
  DATA32 event_trigger_time_hi;
  DATA32 event_trigger_time_lo;
  DATA16 hit_pattern;
  raw_array_zero_suppress<DATA16,DATA16,16> channel_trigger_time_hi;
  raw_array_zero_suppress<DATA32,DATA32,16> channel_trigger_time_lo;
  raw_array_zero_suppress<DATA8,DATA8,16> pileup;
  raw_array_zero_suppress<DATA8,DATA8,16> overflow;
  raw_array_zero_suppress<DATA8,DATA8,16> channel_cfd;
  raw_array_zero_suppress<DATA32,DATA32,16> channel_energy;
} ;
class FEBEX_EVENT_TRACES
{
  DATA8 trig;
  DATA32 event_trigger_time_hi;
  DATA32 event_trigger_time_lo;
  DATA16 hit_pattern;
  DATA32 num_channels_fired;
  DATA8 board_num;
  raw_array_zero_suppress<DATA8,DATA8,16> channel_id;
  raw_array_zero_suppress<DATA16,DATA16,16> channel_trigger_time_hi;
  raw_array_zero_suppress<DATA32,DATA32,16> channel_trigger_time_lo;
  raw_array<DATA8,DATA8,16> pileup;
  raw_array<DATA8,DATA8,16> overflow;
  raw_array_zero_suppress<DATA8,DATA8,16> channel_cfd;
  raw_array_zero_suppress<DATA32,DATA32,16> channel_energy;
  raw_array_zero_suppress<DATA16,DATA16,4000> traces[16];
  DUMMY dummy;
} ;
class FEBEX_PADDING
{
  ;
} ;
class TAMEX4_EPOCH_DATA
{
  ;
} ;
class TAMEX4_HEADER
{
  DATA16 post_trig_ns;
  DATA16 pre_trig_ns;
} ;
class TAMEX4_PADDING
{
  ;
} ;
class TAMEX4_TIME_DATA
{
  ;
} ;
class TAMEX4_SFP
{
  DATA16 trig;
  DATA32 event_size;
  raw_list_ii_zero_suppress<DATA12,DATA12,1024> time_coarse;
  raw_list_ii_zero_suppress<DATA12,DATA12,1024> time_fine;
  raw_list_ii_zero_suppress<DATA12,DATA12,1024> time_edge;
  raw_list_ii_zero_suppress<DATA12,DATA12,1024> time_channel;
  raw_list_ii_zero_suppress<DATA32,DATA32,1024> time_epoch;
  TAMEX4_EPOCH_DATA epoch;
  TAMEX4_TIME_DATA time;
} ;
class TIMESTAMP_WHITERABBIT
{
  DATA12 subsystem_id;
  DATA16 t1;
  DATA16 t2;
  DATA16 t3;
  DATA16 t4;
} ;
class TIMESTAMP_WHITERABBIT_EXTENDED
{
  DATA16 subsystem_id;
  DATA16 t1;
  DATA16 t2;
  DATA16 t3;
  DATA16 t4;
} ;
class VME_CAEN_V1751
{
  DATA8 board_id;
  DATA8 channels;
  DATA32 board_time;
  raw_list_ii_zero_suppress<DATA32,DATA32,64> channel_time;
  raw_list_ii_zero_suppress<DATA16,DATA16,64> chan_ext_time;
  raw_list_ii_zero_suppress<DATA12,DATA12,64> chan_fine_time;
  raw_list_ii_zero_suppress<DATA16,DATA16,64> qshort;
  raw_list_ii_zero_suppress<DATA16,DATA16,64> qlong;
} ;
class WR_MULTI
{
  DATA32 time_hi;
  DATA32 time_lo;
} ;
class bplast_subev : public unpack_subevent_base
{
  TIMESTAMP_WHITERABBIT ts;
  TAMEX4_HEADER trigger_window;
  TAMEX4_PADDING padding;
  TAMEX4_SFP tamex[9];
} ;
class fatima_tamex_subev : public unpack_subevent_base
{
  TIMESTAMP_WHITERABBIT_EXTENDED ts;
  TAMEX4_SFP data[4];
} ;
class unpack_event : public unpack_event_base
{
  fatima_tamex_subev fatima;
  bplast_subev bplast;
} ;
class unpack_sticky_event : public unpack_sticky_event_base
{
  ;
} ;
/**********************************************************/

/** END_INPUT_DEFINITION **********************************************/


/** BEGIN_MIRROR_STRUCT ************************************************
 *
 * Mirror (1 to 1) structure.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_mirror_define.hh"

#ifndef USER_DEF_BAD_EVENT
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(BAD_EVENT)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(bad);
  STRUCT_MIRROR_TYPE(DATA8) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(bad);
  STRUCT_MIRROR_FCNS_DECL(BAD_EVENT);
};
#endif//USER_DEF_BAD_EVENT

#ifndef USER_DEF_DUMMY
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(DUMMY)
{
public:
  STRUCT_MIRROR_FCNS_DECL(DUMMY);
};
#endif//USER_DEF_DUMMY

#ifndef USER_DEF_FEBEX_EVENT
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(FEBEX_EVENT)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(trig);
  STRUCT_MIRROR_TYPE(DATA8) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(trig);
  STRUCT_MIRROR_ITEM_CTRL(event_trigger_time_hi);
  STRUCT_MIRROR_TYPE(DATA32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(event_trigger_time_hi);
  STRUCT_MIRROR_ITEM_CTRL(event_trigger_time_lo);
  STRUCT_MIRROR_TYPE(DATA32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(event_trigger_time_lo);
  STRUCT_MIRROR_ITEM_CTRL(hit_pattern);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(hit_pattern);
  STRUCT_MIRROR_ITEM_CTRL(channel_trigger_time_hi);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA16),STRUCT_MIRROR_TEMPLATE_ARG(DATA16),16> STRUCT_MIRROR_NAME(channel_trigger_time_hi);
  STRUCT_MIRROR_ITEM_CTRL(channel_trigger_time_lo);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA32),STRUCT_MIRROR_TEMPLATE_ARG(DATA32),16> STRUCT_MIRROR_NAME(channel_trigger_time_lo);
  STRUCT_MIRROR_ITEM_CTRL(pileup);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA8),STRUCT_MIRROR_TEMPLATE_ARG(DATA8),16> STRUCT_MIRROR_NAME(pileup);
  STRUCT_MIRROR_ITEM_CTRL(overflow);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA8),STRUCT_MIRROR_TEMPLATE_ARG(DATA8),16> STRUCT_MIRROR_NAME(overflow);
  STRUCT_MIRROR_ITEM_CTRL(channel_cfd);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA8),STRUCT_MIRROR_TEMPLATE_ARG(DATA8),16> STRUCT_MIRROR_NAME(channel_cfd);
  STRUCT_MIRROR_ITEM_CTRL(channel_energy);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA32),STRUCT_MIRROR_TEMPLATE_ARG(DATA32),16> STRUCT_MIRROR_NAME(channel_energy);
  STRUCT_MIRROR_FCNS_DECL(FEBEX_EVENT);
};
#endif//USER_DEF_FEBEX_EVENT

#ifndef USER_DEF_FEBEX_EVENT_TRACES
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(FEBEX_EVENT_TRACES)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(trig);
  STRUCT_MIRROR_TYPE(DATA8) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(trig);
  STRUCT_MIRROR_ITEM_CTRL(event_trigger_time_hi);
  STRUCT_MIRROR_TYPE(DATA32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(event_trigger_time_hi);
  STRUCT_MIRROR_ITEM_CTRL(event_trigger_time_lo);
  STRUCT_MIRROR_TYPE(DATA32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(event_trigger_time_lo);
  STRUCT_MIRROR_ITEM_CTRL(hit_pattern);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(hit_pattern);
  STRUCT_MIRROR_ITEM_CTRL(num_channels_fired);
  STRUCT_MIRROR_TYPE(DATA32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(num_channels_fired);
  STRUCT_MIRROR_ITEM_CTRL(board_num);
  STRUCT_MIRROR_TYPE(DATA8) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(board_num);
  STRUCT_MIRROR_ITEM_CTRL(channel_id);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA8),STRUCT_MIRROR_TEMPLATE_ARG(DATA8),16> STRUCT_MIRROR_NAME(channel_id);
  STRUCT_MIRROR_ITEM_CTRL(channel_trigger_time_hi);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA16),STRUCT_MIRROR_TEMPLATE_ARG(DATA16),16> STRUCT_MIRROR_NAME(channel_trigger_time_hi);
  STRUCT_MIRROR_ITEM_CTRL(channel_trigger_time_lo);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA32),STRUCT_MIRROR_TEMPLATE_ARG(DATA32),16> STRUCT_MIRROR_NAME(channel_trigger_time_lo);
  STRUCT_MIRROR_ITEM_CTRL(pileup);
  STRUCT_MIRROR_TYPE(raw_array) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA8),STRUCT_MIRROR_TEMPLATE_ARG(DATA8),16> STRUCT_MIRROR_NAME(pileup);
  STRUCT_MIRROR_ITEM_CTRL(overflow);
  STRUCT_MIRROR_TYPE(raw_array) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA8),STRUCT_MIRROR_TEMPLATE_ARG(DATA8),16> STRUCT_MIRROR_NAME(overflow);
  STRUCT_MIRROR_ITEM_CTRL(channel_cfd);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA8),STRUCT_MIRROR_TEMPLATE_ARG(DATA8),16> STRUCT_MIRROR_NAME(channel_cfd);
  STRUCT_MIRROR_ITEM_CTRL(channel_energy);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA32),STRUCT_MIRROR_TEMPLATE_ARG(DATA32),16> STRUCT_MIRROR_NAME(channel_energy);
  STRUCT_MIRROR_ITEM_CTRL(traces);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(traces__i0,,16);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA16),STRUCT_MIRROR_TEMPLATE_ARG(DATA16),4000> STRUCT_MIRROR_NAME(traces[16]);
  STRUCT_MIRROR_ITEM_CTRL(dummy);
  STRUCT_MIRROR_TYPE(DUMMY) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy);
  STRUCT_MIRROR_FCNS_DECL(FEBEX_EVENT_TRACES);
};
#endif//USER_DEF_FEBEX_EVENT_TRACES

#ifndef USER_DEF_FEBEX_PADDING
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(FEBEX_PADDING)
{
public:
  STRUCT_MIRROR_FCNS_DECL(FEBEX_PADDING);
};
#endif//USER_DEF_FEBEX_PADDING

#ifndef USER_DEF_TAMEX4_EPOCH_DATA
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(TAMEX4_EPOCH_DATA)
{
public:
  STRUCT_MIRROR_FCNS_DECL(TAMEX4_EPOCH_DATA);
};
#endif//USER_DEF_TAMEX4_EPOCH_DATA

#ifndef USER_DEF_TAMEX4_HEADER
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(TAMEX4_HEADER)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(post_trig_ns);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(post_trig_ns);
  STRUCT_MIRROR_ITEM_CTRL(pre_trig_ns);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(pre_trig_ns);
  STRUCT_MIRROR_FCNS_DECL(TAMEX4_HEADER);
};
#endif//USER_DEF_TAMEX4_HEADER

#ifndef USER_DEF_TAMEX4_PADDING
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(TAMEX4_PADDING)
{
public:
  STRUCT_MIRROR_FCNS_DECL(TAMEX4_PADDING);
};
#endif//USER_DEF_TAMEX4_PADDING

#ifndef USER_DEF_TAMEX4_TIME_DATA
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(TAMEX4_TIME_DATA)
{
public:
  STRUCT_MIRROR_FCNS_DECL(TAMEX4_TIME_DATA);
};
#endif//USER_DEF_TAMEX4_TIME_DATA

#ifndef USER_DEF_TAMEX4_SFP
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(TAMEX4_SFP)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(trig);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(trig);
  STRUCT_MIRROR_ITEM_CTRL(event_size);
  STRUCT_MIRROR_TYPE(DATA32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(event_size);
  STRUCT_MIRROR_ITEM_CTRL(time_coarse);
  STRUCT_MIRROR_TYPE(raw_list_ii_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA12),STRUCT_MIRROR_TEMPLATE_ARG(DATA12),1024> STRUCT_MIRROR_NAME(time_coarse);
  STRUCT_MIRROR_ITEM_CTRL(time_fine);
  STRUCT_MIRROR_TYPE(raw_list_ii_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA12),STRUCT_MIRROR_TEMPLATE_ARG(DATA12),1024> STRUCT_MIRROR_NAME(time_fine);
  STRUCT_MIRROR_ITEM_CTRL(time_edge);
  STRUCT_MIRROR_TYPE(raw_list_ii_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA12),STRUCT_MIRROR_TEMPLATE_ARG(DATA12),1024> STRUCT_MIRROR_NAME(time_edge);
  STRUCT_MIRROR_ITEM_CTRL(time_channel);
  STRUCT_MIRROR_TYPE(raw_list_ii_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA12),STRUCT_MIRROR_TEMPLATE_ARG(DATA12),1024> STRUCT_MIRROR_NAME(time_channel);
  STRUCT_MIRROR_ITEM_CTRL(time_epoch);
  STRUCT_MIRROR_TYPE(raw_list_ii_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA32),STRUCT_MIRROR_TEMPLATE_ARG(DATA32),1024> STRUCT_MIRROR_NAME(time_epoch);
  STRUCT_MIRROR_ITEM_CTRL(epoch);
  STRUCT_MIRROR_TYPE(TAMEX4_EPOCH_DATA) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(epoch);
  STRUCT_MIRROR_ITEM_CTRL(time);
  STRUCT_MIRROR_TYPE(TAMEX4_TIME_DATA) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(time);
  STRUCT_MIRROR_FCNS_DECL(TAMEX4_SFP);
};
#endif//USER_DEF_TAMEX4_SFP

#ifndef USER_DEF_TIMESTAMP_WHITERABBIT
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(TIMESTAMP_WHITERABBIT)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(subsystem_id);
  STRUCT_MIRROR_TYPE(DATA12) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(subsystem_id);
  STRUCT_MIRROR_ITEM_CTRL(t1);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(t1);
  STRUCT_MIRROR_ITEM_CTRL(t2);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(t2);
  STRUCT_MIRROR_ITEM_CTRL(t3);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(t3);
  STRUCT_MIRROR_ITEM_CTRL(t4);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(t4);
  STRUCT_MIRROR_FCNS_DECL(TIMESTAMP_WHITERABBIT);
};
#endif//USER_DEF_TIMESTAMP_WHITERABBIT

#ifndef USER_DEF_TIMESTAMP_WHITERABBIT_EXTENDED
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(TIMESTAMP_WHITERABBIT_EXTENDED)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(subsystem_id);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(subsystem_id);
  STRUCT_MIRROR_ITEM_CTRL(t1);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(t1);
  STRUCT_MIRROR_ITEM_CTRL(t2);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(t2);
  STRUCT_MIRROR_ITEM_CTRL(t3);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(t3);
  STRUCT_MIRROR_ITEM_CTRL(t4);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(t4);
  STRUCT_MIRROR_FCNS_DECL(TIMESTAMP_WHITERABBIT_EXTENDED);
};
#endif//USER_DEF_TIMESTAMP_WHITERABBIT_EXTENDED

#ifndef USER_DEF_VME_CAEN_V1751
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_CAEN_V1751)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(board_id);
  STRUCT_MIRROR_TYPE(DATA8) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(board_id);
  STRUCT_MIRROR_ITEM_CTRL(channels);
  STRUCT_MIRROR_TYPE(DATA8) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(channels);
  STRUCT_MIRROR_ITEM_CTRL(board_time);
  STRUCT_MIRROR_TYPE(DATA32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(board_time);
  STRUCT_MIRROR_ITEM_CTRL(channel_time);
  STRUCT_MIRROR_TYPE(raw_list_ii_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA32),STRUCT_MIRROR_TEMPLATE_ARG(DATA32),64> STRUCT_MIRROR_NAME(channel_time);
  STRUCT_MIRROR_ITEM_CTRL(chan_ext_time);
  STRUCT_MIRROR_TYPE(raw_list_ii_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA16),STRUCT_MIRROR_TEMPLATE_ARG(DATA16),64> STRUCT_MIRROR_NAME(chan_ext_time);
  STRUCT_MIRROR_ITEM_CTRL(chan_fine_time);
  STRUCT_MIRROR_TYPE(raw_list_ii_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA12),STRUCT_MIRROR_TEMPLATE_ARG(DATA12),64> STRUCT_MIRROR_NAME(chan_fine_time);
  STRUCT_MIRROR_ITEM_CTRL(qshort);
  STRUCT_MIRROR_TYPE(raw_list_ii_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA16),STRUCT_MIRROR_TEMPLATE_ARG(DATA16),64> STRUCT_MIRROR_NAME(qshort);
  STRUCT_MIRROR_ITEM_CTRL(qlong);
  STRUCT_MIRROR_TYPE(raw_list_ii_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA16),STRUCT_MIRROR_TEMPLATE_ARG(DATA16),64> STRUCT_MIRROR_NAME(qlong);
  STRUCT_MIRROR_FCNS_DECL(VME_CAEN_V1751);
};
#endif//USER_DEF_VME_CAEN_V1751

#ifndef USER_DEF_WR_MULTI
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(WR_MULTI)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(time_hi);
  STRUCT_MIRROR_TYPE(DATA32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(time_hi);
  STRUCT_MIRROR_ITEM_CTRL(time_lo);
  STRUCT_MIRROR_TYPE(DATA32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(time_lo);
  STRUCT_MIRROR_FCNS_DECL(WR_MULTI);
};
#endif//USER_DEF_WR_MULTI

#ifndef USER_DEF_bplast_subev
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(bplast_subev) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(ts);
  STRUCT_MIRROR_TYPE(TIMESTAMP_WHITERABBIT) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(ts);
  STRUCT_MIRROR_ITEM_CTRL(trigger_window);
  STRUCT_MIRROR_TYPE(TAMEX4_HEADER) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(trigger_window);
  STRUCT_MIRROR_ITEM_CTRL(padding);
  STRUCT_MIRROR_TYPE(TAMEX4_PADDING) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(padding);
  STRUCT_MIRROR_ITEM_CTRL(tamex);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(tamex__i0,,9);
  STRUCT_MIRROR_TYPE(TAMEX4_SFP) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tamex[9]);
  STRUCT_MIRROR_FCNS_DECL(bplast_subev);
};
#endif//USER_DEF_bplast_subev

#ifndef USER_DEF_fatima_tamex_subev
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(fatima_tamex_subev) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(ts);
  STRUCT_MIRROR_TYPE(TIMESTAMP_WHITERABBIT_EXTENDED) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(ts);
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(data__i0,,4);
  STRUCT_MIRROR_TYPE(TAMEX4_SFP) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(data[4]);
  STRUCT_MIRROR_FCNS_DECL(fatima_tamex_subev);
};
#endif//USER_DEF_fatima_tamex_subev

#ifndef USER_DEF_unpack_event
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(unpack_event) : public STRUCT_MIRROR_BASE(unpack_event_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_event_base);
  STRUCT_MIRROR_ITEM_CTRL(fatima);
  STRUCT_MIRROR_TYPE(fatima_tamex_subev) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(fatima);
  STRUCT_MIRROR_ITEM_CTRL(bplast);
  STRUCT_MIRROR_TYPE(bplast_subev) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(bplast);
  STRUCT_MIRROR_FCNS_DECL(unpack_event);
};
#endif//USER_DEF_unpack_event

#ifndef USER_DEF_unpack_sticky_event
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(unpack_sticky_event) : public STRUCT_MIRROR_BASE(unpack_sticky_event_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_sticky_event_base);
  STRUCT_MIRROR_FCNS_DECL(unpack_sticky_event);
};
#endif//USER_DEF_unpack_sticky_event

#include "gen/default_mirror_undef.hh"


/** END_MIRROR_STRUCT *************************************************/


/** BEGIN_MIRROR_DECL_STRUCT *******************************************
 *
 * Mirror structure names.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_mirror_define.hh"

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(BAD_EVENT);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(DUMMY);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(FEBEX_EVENT);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(FEBEX_EVENT_TRACES);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(FEBEX_PADDING);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(TAMEX4_EPOCH_DATA);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(TAMEX4_HEADER);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(TAMEX4_PADDING);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(TAMEX4_TIME_DATA);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(TAMEX4_SFP);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(TIMESTAMP_WHITERABBIT);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(TIMESTAMP_WHITERABBIT_EXTENDED);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_CAEN_V1751);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(WR_MULTI);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(bplast_subev);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(fatima_tamex_subev);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(unpack_event);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(unpack_sticky_event);

#include "gen/default_mirror_undef.hh"


/** END_MIRROR_DECL_STRUCT ********************************************/


/** BEGIN_FUNCTION_CALL_PER_MEMBER *************************************
 *
 * Recursive function calls per member.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_fcncall_define.hh"

#ifndef USER_DEF_BAD_EVENT
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(BAD_EVENT)::FCNCALL_NAME(BAD_EVENT)
{
  FCNCALL_INIT;
  // DATA8 bad;
  {
  FCNCALL_SUBNAME("bad");
  { FCNCALL_CALL_CTRL_WRAP(bad,bad.FCNCALL_CALL(bad)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_BAD_EVENT

#ifndef USER_DEF_DUMMY
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(DUMMY)::FCNCALL_NAME(DUMMY)
{
  FCNCALL_INIT;
  FCNCALL_RET;
}
#endif//USER_DEF_DUMMY

#ifndef USER_DEF_FEBEX_EVENT
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(FEBEX_EVENT)::FCNCALL_NAME(FEBEX_EVENT)
{
  FCNCALL_INIT;
  // DATA8 trig;
  {
  FCNCALL_SUBNAME("trig");
  { FCNCALL_CALL_CTRL_WRAP(trig,trig.FCNCALL_CALL(trig)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA32 event_trigger_time_hi;
  {
  FCNCALL_SUBNAME("event_trigger_time_hi");
  { FCNCALL_CALL_CTRL_WRAP(event_trigger_time_hi,event_trigger_time_hi.FCNCALL_CALL(event_trigger_time_hi)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA32 event_trigger_time_lo;
  {
  FCNCALL_SUBNAME("event_trigger_time_lo");
  { FCNCALL_CALL_CTRL_WRAP(event_trigger_time_lo,event_trigger_time_lo.FCNCALL_CALL(event_trigger_time_lo)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA16 hit_pattern;
  {
  FCNCALL_SUBNAME("hit_pattern");
  { FCNCALL_CALL_CTRL_WRAP(hit_pattern,hit_pattern.FCNCALL_CALL(hit_pattern)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_array_zero_suppress<DATA16,DATA16,16> channel_trigger_time_hi;
  {
  FCNCALL_SUBNAME("channel_trigger_time_hi");
  { FCNCALL_CALL_CTRL_WRAP(channel_trigger_time_hi,channel_trigger_time_hi.FCNCALL_CALL(channel_trigger_time_hi)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_array_zero_suppress<DATA32,DATA32,16> channel_trigger_time_lo;
  {
  FCNCALL_SUBNAME("channel_trigger_time_lo");
  { FCNCALL_CALL_CTRL_WRAP(channel_trigger_time_lo,channel_trigger_time_lo.FCNCALL_CALL(channel_trigger_time_lo)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_array_zero_suppress<DATA8,DATA8,16> pileup;
  {
  FCNCALL_SUBNAME("pileup");
  { FCNCALL_CALL_CTRL_WRAP(pileup,pileup.FCNCALL_CALL(pileup)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_array_zero_suppress<DATA8,DATA8,16> overflow;
  {
  FCNCALL_SUBNAME("overflow");
  { FCNCALL_CALL_CTRL_WRAP(overflow,overflow.FCNCALL_CALL(overflow)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_array_zero_suppress<DATA8,DATA8,16> channel_cfd;
  {
  FCNCALL_SUBNAME("channel_cfd");
  { FCNCALL_CALL_CTRL_WRAP(channel_cfd,channel_cfd.FCNCALL_CALL(channel_cfd)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_array_zero_suppress<DATA32,DATA32,16> channel_energy;
  {
  FCNCALL_SUBNAME("channel_energy");
  { FCNCALL_CALL_CTRL_WRAP(channel_energy,channel_energy.FCNCALL_CALL(channel_energy)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_FEBEX_EVENT

#ifndef USER_DEF_FEBEX_EVENT_TRACES
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(FEBEX_EVENT_TRACES)::FCNCALL_NAME(FEBEX_EVENT_TRACES)
{
  FCNCALL_INIT;
  // DATA8 trig;
  {
  FCNCALL_SUBNAME("trig");
  { FCNCALL_CALL_CTRL_WRAP(trig,trig.FCNCALL_CALL(trig)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA32 event_trigger_time_hi;
  {
  FCNCALL_SUBNAME("event_trigger_time_hi");
  { FCNCALL_CALL_CTRL_WRAP(event_trigger_time_hi,event_trigger_time_hi.FCNCALL_CALL(event_trigger_time_hi)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA32 event_trigger_time_lo;
  {
  FCNCALL_SUBNAME("event_trigger_time_lo");
  { FCNCALL_CALL_CTRL_WRAP(event_trigger_time_lo,event_trigger_time_lo.FCNCALL_CALL(event_trigger_time_lo)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA16 hit_pattern;
  {
  FCNCALL_SUBNAME("hit_pattern");
  { FCNCALL_CALL_CTRL_WRAP(hit_pattern,hit_pattern.FCNCALL_CALL(hit_pattern)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA32 num_channels_fired;
  {
  FCNCALL_SUBNAME("num_channels_fired");
  { FCNCALL_CALL_CTRL_WRAP(num_channels_fired,num_channels_fired.FCNCALL_CALL(num_channels_fired)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA8 board_num;
  {
  FCNCALL_SUBNAME("board_num");
  { FCNCALL_CALL_CTRL_WRAP(board_num,board_num.FCNCALL_CALL(board_num)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_array_zero_suppress<DATA8,DATA8,16> channel_id;
  {
  FCNCALL_SUBNAME("channel_id");
  { FCNCALL_CALL_CTRL_WRAP(channel_id,channel_id.FCNCALL_CALL(channel_id)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_array_zero_suppress<DATA16,DATA16,16> channel_trigger_time_hi;
  {
  FCNCALL_SUBNAME("channel_trigger_time_hi");
  { FCNCALL_CALL_CTRL_WRAP(channel_trigger_time_hi,channel_trigger_time_hi.FCNCALL_CALL(channel_trigger_time_hi)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_array_zero_suppress<DATA32,DATA32,16> channel_trigger_time_lo;
  {
  FCNCALL_SUBNAME("channel_trigger_time_lo");
  { FCNCALL_CALL_CTRL_WRAP(channel_trigger_time_lo,channel_trigger_time_lo.FCNCALL_CALL(channel_trigger_time_lo)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_array<DATA8,DATA8,16> pileup;
  {
  FCNCALL_SUBNAME("pileup");
  { FCNCALL_CALL_CTRL_WRAP(pileup,pileup.FCNCALL_CALL(pileup)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_array<DATA8,DATA8,16> overflow;
  {
  FCNCALL_SUBNAME("overflow");
  { FCNCALL_CALL_CTRL_WRAP(overflow,overflow.FCNCALL_CALL(overflow)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_array_zero_suppress<DATA8,DATA8,16> channel_cfd;
  {
  FCNCALL_SUBNAME("channel_cfd");
  { FCNCALL_CALL_CTRL_WRAP(channel_cfd,channel_cfd.FCNCALL_CALL(channel_cfd)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_array_zero_suppress<DATA32,DATA32,16> channel_energy;
  {
  FCNCALL_SUBNAME("channel_energy");
  { FCNCALL_CALL_CTRL_WRAP(channel_energy,channel_energy.FCNCALL_CALL(channel_energy)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_array_zero_suppress<DATA16,DATA16,4000> traces[16];
  {
  FCNCALL_SUBNAME("traces");
  FCNCALL_FOR(__i0,16)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(traces__i0,,__i0,traces[__i0].FCNCALL_CALL(traces[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // DUMMY dummy;
  {
  FCNCALL_SUBNAME("dummy");
  { FCNCALL_CALL_CTRL_WRAP(dummy,dummy.FCNCALL_CALL(dummy)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_FEBEX_EVENT_TRACES

#ifndef USER_DEF_FEBEX_PADDING
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(FEBEX_PADDING)::FCNCALL_NAME(FEBEX_PADDING)
{
  FCNCALL_INIT;
  FCNCALL_RET;
}
#endif//USER_DEF_FEBEX_PADDING

#ifndef USER_DEF_TAMEX4_EPOCH_DATA
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(TAMEX4_EPOCH_DATA)::FCNCALL_NAME(TAMEX4_EPOCH_DATA)
{
  FCNCALL_INIT;
  FCNCALL_RET;
}
#endif//USER_DEF_TAMEX4_EPOCH_DATA

#ifndef USER_DEF_TAMEX4_HEADER
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(TAMEX4_HEADER)::FCNCALL_NAME(TAMEX4_HEADER)
{
  FCNCALL_INIT;
  // DATA16 post_trig_ns;
  {
  FCNCALL_SUBNAME("post_trig_ns");
  { FCNCALL_CALL_CTRL_WRAP(post_trig_ns,post_trig_ns.FCNCALL_CALL(post_trig_ns)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA16 pre_trig_ns;
  {
  FCNCALL_SUBNAME("pre_trig_ns");
  { FCNCALL_CALL_CTRL_WRAP(pre_trig_ns,pre_trig_ns.FCNCALL_CALL(pre_trig_ns)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_TAMEX4_HEADER

#ifndef USER_DEF_TAMEX4_PADDING
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(TAMEX4_PADDING)::FCNCALL_NAME(TAMEX4_PADDING)
{
  FCNCALL_INIT;
  FCNCALL_RET;
}
#endif//USER_DEF_TAMEX4_PADDING

#ifndef USER_DEF_TAMEX4_TIME_DATA
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(TAMEX4_TIME_DATA)::FCNCALL_NAME(TAMEX4_TIME_DATA)
{
  FCNCALL_INIT;
  FCNCALL_RET;
}
#endif//USER_DEF_TAMEX4_TIME_DATA

#ifndef USER_DEF_TAMEX4_SFP
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(TAMEX4_SFP)::FCNCALL_NAME(TAMEX4_SFP)
{
  FCNCALL_INIT;
  // DATA16 trig;
  {
  FCNCALL_SUBNAME("trig");
  { FCNCALL_CALL_CTRL_WRAP(trig,trig.FCNCALL_CALL(trig)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA32 event_size;
  {
  FCNCALL_SUBNAME("event_size");
  { FCNCALL_CALL_CTRL_WRAP(event_size,event_size.FCNCALL_CALL(event_size)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_list_ii_zero_suppress<DATA12,DATA12,1024> time_coarse;
  {
  FCNCALL_SUBNAME("time_coarse");
  { FCNCALL_CALL_CTRL_WRAP(time_coarse,time_coarse.FCNCALL_CALL(time_coarse)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_list_ii_zero_suppress<DATA12,DATA12,1024> time_fine;
  {
  FCNCALL_SUBNAME("time_fine");
  { FCNCALL_CALL_CTRL_WRAP(time_fine,time_fine.FCNCALL_CALL(time_fine)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_list_ii_zero_suppress<DATA12,DATA12,1024> time_edge;
  {
  FCNCALL_SUBNAME("time_edge");
  { FCNCALL_CALL_CTRL_WRAP(time_edge,time_edge.FCNCALL_CALL(time_edge)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_list_ii_zero_suppress<DATA12,DATA12,1024> time_channel;
  {
  FCNCALL_SUBNAME("time_channel");
  { FCNCALL_CALL_CTRL_WRAP(time_channel,time_channel.FCNCALL_CALL(time_channel)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_list_ii_zero_suppress<DATA32,DATA32,1024> time_epoch;
  {
  FCNCALL_SUBNAME("time_epoch");
  { FCNCALL_CALL_CTRL_WRAP(time_epoch,time_epoch.FCNCALL_CALL(time_epoch)); }
  FCNCALL_SUBNAME_END;
  }
  // TAMEX4_EPOCH_DATA epoch;
  {
  FCNCALL_SUBNAME("epoch");
  { FCNCALL_CALL_CTRL_WRAP(epoch,epoch.FCNCALL_CALL(epoch)); }
  FCNCALL_SUBNAME_END;
  }
  // TAMEX4_TIME_DATA time;
  {
  FCNCALL_SUBNAME("time");
  { FCNCALL_CALL_CTRL_WRAP(time,time.FCNCALL_CALL(time)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_TAMEX4_SFP

#ifndef USER_DEF_TIMESTAMP_WHITERABBIT
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(TIMESTAMP_WHITERABBIT)::FCNCALL_NAME(TIMESTAMP_WHITERABBIT)
{
  FCNCALL_INIT;
  // DATA12 subsystem_id;
  {
  FCNCALL_SUBNAME("subsystem_id");
  { FCNCALL_CALL_CTRL_WRAP(subsystem_id,subsystem_id.FCNCALL_CALL(subsystem_id)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA16 t1;
  {
  FCNCALL_SUBNAME("t1");
  { FCNCALL_CALL_CTRL_WRAP(t1,t1.FCNCALL_CALL(t1)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA16 t2;
  {
  FCNCALL_SUBNAME("t2");
  { FCNCALL_CALL_CTRL_WRAP(t2,t2.FCNCALL_CALL(t2)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA16 t3;
  {
  FCNCALL_SUBNAME("t3");
  { FCNCALL_CALL_CTRL_WRAP(t3,t3.FCNCALL_CALL(t3)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA16 t4;
  {
  FCNCALL_SUBNAME("t4");
  { FCNCALL_CALL_CTRL_WRAP(t4,t4.FCNCALL_CALL(t4)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_TIMESTAMP_WHITERABBIT

#ifndef USER_DEF_TIMESTAMP_WHITERABBIT_EXTENDED
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(TIMESTAMP_WHITERABBIT_EXTENDED)::FCNCALL_NAME(TIMESTAMP_WHITERABBIT_EXTENDED)
{
  FCNCALL_INIT;
  // DATA16 subsystem_id;
  {
  FCNCALL_SUBNAME("subsystem_id");
  { FCNCALL_CALL_CTRL_WRAP(subsystem_id,subsystem_id.FCNCALL_CALL(subsystem_id)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA16 t1;
  {
  FCNCALL_SUBNAME("t1");
  { FCNCALL_CALL_CTRL_WRAP(t1,t1.FCNCALL_CALL(t1)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA16 t2;
  {
  FCNCALL_SUBNAME("t2");
  { FCNCALL_CALL_CTRL_WRAP(t2,t2.FCNCALL_CALL(t2)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA16 t3;
  {
  FCNCALL_SUBNAME("t3");
  { FCNCALL_CALL_CTRL_WRAP(t3,t3.FCNCALL_CALL(t3)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA16 t4;
  {
  FCNCALL_SUBNAME("t4");
  { FCNCALL_CALL_CTRL_WRAP(t4,t4.FCNCALL_CALL(t4)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_TIMESTAMP_WHITERABBIT_EXTENDED

#ifndef USER_DEF_VME_CAEN_V1751
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_CAEN_V1751)::FCNCALL_NAME(VME_CAEN_V1751)
{
  FCNCALL_INIT;
  // DATA8 board_id;
  {
  FCNCALL_SUBNAME("board_id");
  { FCNCALL_CALL_CTRL_WRAP(board_id,board_id.FCNCALL_CALL(board_id)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA8 channels;
  {
  FCNCALL_SUBNAME("channels");
  { FCNCALL_CALL_CTRL_WRAP(channels,channels.FCNCALL_CALL(channels)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA32 board_time;
  {
  FCNCALL_SUBNAME("board_time");
  { FCNCALL_CALL_CTRL_WRAP(board_time,board_time.FCNCALL_CALL(board_time)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_list_ii_zero_suppress<DATA32,DATA32,64> channel_time;
  {
  FCNCALL_SUBNAME("channel_time");
  { FCNCALL_CALL_CTRL_WRAP(channel_time,channel_time.FCNCALL_CALL(channel_time)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_list_ii_zero_suppress<DATA16,DATA16,64> chan_ext_time;
  {
  FCNCALL_SUBNAME("chan_ext_time");
  { FCNCALL_CALL_CTRL_WRAP(chan_ext_time,chan_ext_time.FCNCALL_CALL(chan_ext_time)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_list_ii_zero_suppress<DATA12,DATA12,64> chan_fine_time;
  {
  FCNCALL_SUBNAME("chan_fine_time");
  { FCNCALL_CALL_CTRL_WRAP(chan_fine_time,chan_fine_time.FCNCALL_CALL(chan_fine_time)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_list_ii_zero_suppress<DATA16,DATA16,64> qshort;
  {
  FCNCALL_SUBNAME("qshort");
  { FCNCALL_CALL_CTRL_WRAP(qshort,qshort.FCNCALL_CALL(qshort)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_list_ii_zero_suppress<DATA16,DATA16,64> qlong;
  {
  FCNCALL_SUBNAME("qlong");
  { FCNCALL_CALL_CTRL_WRAP(qlong,qlong.FCNCALL_CALL(qlong)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_VME_CAEN_V1751

#ifndef USER_DEF_WR_MULTI
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(WR_MULTI)::FCNCALL_NAME(WR_MULTI)
{
  FCNCALL_INIT;
  // DATA32 time_hi;
  {
  FCNCALL_SUBNAME("time_hi");
  { FCNCALL_CALL_CTRL_WRAP(time_hi,time_hi.FCNCALL_CALL(time_hi)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA32 time_lo;
  {
  FCNCALL_SUBNAME("time_lo");
  { FCNCALL_CALL_CTRL_WRAP(time_lo,time_lo.FCNCALL_CALL(time_lo)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_WR_MULTI

#ifndef USER_DEF_bplast_subev
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(bplast_subev)::FCNCALL_NAME(bplast_subev)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // TIMESTAMP_WHITERABBIT ts;
  {
  FCNCALL_SUBNAME("ts");
  { FCNCALL_CALL_CTRL_WRAP(ts,ts.FCNCALL_CALL(ts)); }
  FCNCALL_SUBNAME_END;
  }
  // TAMEX4_HEADER trigger_window;
  {
  FCNCALL_SUBNAME("trigger_window");
  { FCNCALL_CALL_CTRL_WRAP(trigger_window,trigger_window.FCNCALL_CALL(trigger_window)); }
  FCNCALL_SUBNAME_END;
  }
  // TAMEX4_PADDING padding;
  {
  FCNCALL_SUBNAME("padding");
  { FCNCALL_CALL_CTRL_WRAP(padding,padding.FCNCALL_CALL(padding)); }
  FCNCALL_SUBNAME_END;
  }
  // TAMEX4_SFP tamex[9];
  {
  FCNCALL_SUBNAME("tamex");
  FCNCALL_FOR(__i0,9)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(tamex__i0,,__i0,tamex[__i0].FCNCALL_CALL(tamex[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_bplast_subev

#ifndef USER_DEF_fatima_tamex_subev
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(fatima_tamex_subev)::FCNCALL_NAME(fatima_tamex_subev)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // TIMESTAMP_WHITERABBIT_EXTENDED ts;
  {
  FCNCALL_SUBNAME("ts");
  { FCNCALL_CALL_CTRL_WRAP(ts,ts.FCNCALL_CALL(ts)); }
  FCNCALL_SUBNAME_END;
  }
  // TAMEX4_SFP data[4];
  {
  FCNCALL_SUBNAME("data");
  FCNCALL_FOR(__i0,4)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(data__i0,,__i0,data[__i0].FCNCALL_CALL(data[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_fatima_tamex_subev

#ifndef USER_DEF_unpack_event
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(unpack_event)::FCNCALL_NAME(unpack_event)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_event_base,FCNCALL_CLASS_NAME(unpack_event_base)::FCNCALL_CALL_BASE());
  // fatima_tamex_subev fatima;
  {
  FCNCALL_SUBNAME("fatima");
  { FCNCALL_CALL_CTRL_WRAP(fatima,fatima.FCNCALL_CALL(fatima)); }
  FCNCALL_SUBNAME_END;
  }
  // bplast_subev bplast;
  {
  FCNCALL_SUBNAME("bplast");
  { FCNCALL_CALL_CTRL_WRAP(bplast,bplast.FCNCALL_CALL(bplast)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_unpack_event

#ifndef USER_DEF_unpack_sticky_event
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(unpack_sticky_event)::FCNCALL_NAME(unpack_sticky_event)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_sticky_event_base,FCNCALL_CLASS_NAME(unpack_sticky_event_base)::FCNCALL_CALL_BASE());
  FCNCALL_RET;
}
#endif//USER_DEF_unpack_sticky_event

#include "gen/default_fcncall_undef.hh"


/** END_FUNCTION_CALL_PER_MEMBER **************************************/


/** BEGIN_CORR_STRUCT **************************************************
 *
 * Correlation structure.
 *
 * Do not edit - automatically generated.
 */

// Corr struct for: BAD_EVENT
// DATA8  .bad
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: BAD_EVENT
// .BAD_EVENT// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: BAD_EVENT
// .BAD_EVENT// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: BAD_EVENT
// .BAD_EVENT
// Corr struct for: DUMMY
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: DUMMY
// .DUMMY// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: DUMMY
// .DUMMY// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: DUMMY
// .DUMMY
// Corr struct for: FEBEX_EVENT
// DATA8  .trig
  // ---
// DATA32  .event_trigger_time_hi
  // ---
// DATA32  .event_trigger_time_lo
  // ---
// DATA16  .hit_pattern
// raw_array_zero_suppress  .channel_trigger_time_hi(DATA16)[16]
// raw_array_zero_suppress  .channel_trigger_time_lo(DATA32)[16]
  // ---
// raw_array_zero_suppress  .pileup(DATA8)[16]
  // ---
// raw_array_zero_suppress  .overflow(DATA8)[16]
  // ---
// raw_array_zero_suppress  .channel_cfd(DATA8)[16]
  // ---
// raw_array_zero_suppress  .channel_energy(DATA32)[16]
  // ---
// DATA16 .hit_pattern
// DATA16 .channel_trigger_time_hi[16]
// 
// size= 1  chunks= 17  mem=  17  line=34  total=578
// size=16  chunks=  2  mem=  32  line=34  total=578
// size=17  chunks=  1  mem=  17  line=18  total=306
// 
// corr structure: FEBEX_EVENT
  // DATA16 .hit_pattern
  // DATA16 .channel_trigger_time_hi[16]
// .FEBEX_EVENT/17/.hit_pattern
                // .channel_trigger_time_hi/16/[16]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FEBEX_EVENT
// .FEBEX_EVENT// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FEBEX_EVENT
// .FEBEX_EVENT
// Corr struct for: FEBEX_EVENT_TRACES
// DATA8  .trig
  // ---
// DATA32  .event_trigger_time_hi
  // ---
// DATA32  .event_trigger_time_lo
  // ---
// DATA16  .hit_pattern
// DATA32  .num_channels_fired
  // ---
// DATA8  .board_num
  // ---
// raw_array_zero_suppress  .channel_id(DATA8)[16]
  // ---
// raw_array_zero_suppress  .channel_trigger_time_hi(DATA16)[16]
// raw_array_zero_suppress  .channel_trigger_time_lo(DATA32)[16]
  // ---
// raw_array  .pileup(DATA8)[16]
  // ---
// raw_array  .overflow(DATA8)[16]
  // ---
// raw_array_zero_suppress  .channel_cfd(DATA8)[16]
  // ---
// raw_array_zero_suppress  .channel_energy(DATA32)[16]
  // ---
// raw_array_zero_suppress  .traces[16](DATA16)[4000]
// DUMMY  .dummy
// DATA16 .hit_pattern
// DATA16 .channel_trigger_time_hi[16]
// DATA16 .traces[16][4000]
// 
// size= 1  chunks=64017  mem=64017  line=128034  total=-393582014
// size=16  chunks=64002  mem=1024032  line=1088034  total=933195842
// size=4000  chunks= 18  mem=72000  line=72018  total=315409010
// size=64000  chunks=  3  mem=192000  line=192003  total=-593445837
// size=64017  chunks=  1  mem=64017  line=64018  total=-196726990
// 
// corr structure: FEBEX_EVENT_TRACES
  // DATA16 .hit_pattern
  // DATA16 .channel_trigger_time_hi[16]
  // DATA16 .traces[16][4000]
// .FEBEX_EVENT_TRACES/64017/.hit_pattern
                          // .channel_trigger_time_hi/16/[16]
                          // .traces/64000/[16]/4000/[4000]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FEBEX_EVENT_TRACES
// .FEBEX_EVENT_TRACES// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FEBEX_EVENT_TRACES
// .FEBEX_EVENT_TRACES
// Corr struct for: FEBEX_PADDING
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FEBEX_PADDING
// .FEBEX_PADDING// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FEBEX_PADDING
// .FEBEX_PADDING// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FEBEX_PADDING
// .FEBEX_PADDING
// Corr struct for: TAMEX4_EPOCH_DATA
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TAMEX4_EPOCH_DATA
// .TAMEX4_EPOCH_DATA// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TAMEX4_EPOCH_DATA
// .TAMEX4_EPOCH_DATA// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TAMEX4_EPOCH_DATA
// .TAMEX4_EPOCH_DATA
// Corr struct for: TAMEX4_HEADER
// DATA16  .post_trig_ns
// DATA16  .pre_trig_ns
// DATA16 .post_trig_ns
// DATA16 .pre_trig_ns
// 
// size= 1  chunks=  2  mem=   2  line=4  total=8
// size= 2  chunks=  1  mem=   2  line=3  total=6
// 
// corr structure: TAMEX4_HEADER
  // DATA16 .post_trig_ns
  // DATA16 .pre_trig_ns
// .TAMEX4_HEADER/2/.post_trig_ns
                 // .pre_trig_ns// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TAMEX4_HEADER
// .TAMEX4_HEADER// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TAMEX4_HEADER
// .TAMEX4_HEADER
// Corr struct for: TAMEX4_PADDING
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TAMEX4_PADDING
// .TAMEX4_PADDING// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TAMEX4_PADDING
// .TAMEX4_PADDING// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TAMEX4_PADDING
// .TAMEX4_PADDING
// Corr struct for: TAMEX4_TIME_DATA
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TAMEX4_TIME_DATA
// .TAMEX4_TIME_DATA// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TAMEX4_TIME_DATA
// .TAMEX4_TIME_DATA// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TAMEX4_TIME_DATA
// .TAMEX4_TIME_DATA
// Corr struct for: TAMEX4_SFP
// DATA16  .trig
// DATA32  .event_size
  // ---
// raw_list_ii_zero_suppress  .time_coarse(DATA12)[1024]
// raw_list_ii_zero_suppress  .time_fine(DATA12)[1024]
// raw_list_ii_zero_suppress  .time_edge(DATA12)[1024]
// raw_list_ii_zero_suppress  .time_channel(DATA12)[1024]
// raw_list_ii_zero_suppress  .time_epoch(DATA32)[1024]
  // ---
// TAMEX4_EPOCH_DATA  .epoch
// TAMEX4_TIME_DATA  .time
// DATA16 .trig
// DATA12 .time_coarse[1024]
// DATA12 .time_fine[1024]
// DATA12 .time_edge[1024]
// DATA12 .time_channel[1024]
// 
// size= 1  chunks=4097  mem=4097  line=8194  total=33570818
// size=1024  chunks=  5  mem=5120  line=5125  total=20997125
// size=4097  chunks=  1  mem=4097  line=4098  total=16789506
// 
// corr structure: TAMEX4_SFP
  // DATA16 .trig
  // DATA12 .time_coarse[1024]
  // DATA12 .time_fine[1024]
  // DATA12 .time_edge[1024]
  // DATA12 .time_channel[1024]
// .TAMEX4_SFP/4097/.trig
                 // .time_coarse/1024/[1024]
                 // .time_fine/1024/[1024]
                 // .time_edge/1024/[1024]
                 // .time_channel/1024/[1024]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TAMEX4_SFP
// .TAMEX4_SFP// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TAMEX4_SFP
// .TAMEX4_SFP
// Corr struct for: TIMESTAMP_WHITERABBIT
// DATA12  .subsystem_id
// DATA16  .t1
// DATA16  .t2
// DATA16  .t3
// DATA16  .t4
// DATA12 .subsystem_id
// DATA16 .t1
// DATA16 .t2
// DATA16 .t3
// DATA16 .t4
// 
// size= 1  chunks=  5  mem=   5  line=10  total=50
// size= 5  chunks=  1  mem=   5  line=6  total=30
// 
// corr structure: TIMESTAMP_WHITERABBIT
  // DATA12 .subsystem_id
  // DATA16 .t1
  // DATA16 .t2
  // DATA16 .t3
  // DATA16 .t4
// .TIMESTAMP_WHITERABBIT/5/.subsystem_id
                         // .t1
                         // .t2
                         // .t3
                         // .t4// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TIMESTAMP_WHITERABBIT
// .TIMESTAMP_WHITERABBIT// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TIMESTAMP_WHITERABBIT
// .TIMESTAMP_WHITERABBIT
// Corr struct for: TIMESTAMP_WHITERABBIT_EXTENDED
// DATA16  .subsystem_id
// DATA16  .t1
// DATA16  .t2
// DATA16  .t3
// DATA16  .t4
// DATA16 .subsystem_id
// DATA16 .t1
// DATA16 .t2
// DATA16 .t3
// DATA16 .t4
// 
// size= 1  chunks=  5  mem=   5  line=10  total=50
// size= 5  chunks=  1  mem=   5  line=6  total=30
// 
// corr structure: TIMESTAMP_WHITERABBIT_EXTENDED
  // DATA16 .subsystem_id
  // DATA16 .t1
  // DATA16 .t2
  // DATA16 .t3
  // DATA16 .t4
// .TIMESTAMP_WHITERABBIT_EXTENDED/5/.subsystem_id
                                  // .t1
                                  // .t2
                                  // .t3
                                  // .t4// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TIMESTAMP_WHITERABBIT_EXTENDED
// .TIMESTAMP_WHITERABBIT_EXTENDED// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TIMESTAMP_WHITERABBIT_EXTENDED
// .TIMESTAMP_WHITERABBIT_EXTENDED
// Corr struct for: VME_CAEN_V1751
// DATA8  .board_id
  // ---
// DATA8  .channels
  // ---
// DATA32  .board_time
  // ---
// raw_list_ii_zero_suppress  .channel_time(DATA32)[64]
  // ---
// raw_list_ii_zero_suppress  .chan_ext_time(DATA16)[64]
// raw_list_ii_zero_suppress  .chan_fine_time(DATA12)[64]
// raw_list_ii_zero_suppress  .qshort(DATA16)[64]
// raw_list_ii_zero_suppress  .qlong(DATA16)[64]
// DATA16 .chan_ext_time[64]
// DATA12 .chan_fine_time[64]
// DATA16 .qshort[64]
// DATA16 .qlong[64]
// 
// size= 1  chunks=256  mem= 256  line=512  total=131072
// size=64  chunks=  4  mem= 256  line=260  total=66560
// size=256  chunks=  1  mem= 256  line=257  total=65792
// 
// corr structure: VME_CAEN_V1751
  // DATA16 .chan_ext_time[64]
  // DATA12 .chan_fine_time[64]
  // DATA16 .qshort[64]
  // DATA16 .qlong[64]
// .VME_CAEN_V1751/256/.chan_ext_time/64/[64]
                    // .chan_fine_time/64/[64]
                    // .qshort/64/[64]
                    // .qlong/64/[64]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1751
// .VME_CAEN_V1751// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1751
// .VME_CAEN_V1751
// Corr struct for: WR_MULTI
// DATA32  .time_hi
  // ---
// DATA32  .time_lo
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: WR_MULTI
// .WR_MULTI// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: WR_MULTI
// .WR_MULTI// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: WR_MULTI
// .WR_MULTI
// Corr struct for: bplast_subev
//  : public unpack_subevent_base
// ---
// TIMESTAMP_WHITERABBIT  .ts
  // DATA12  .subsystem_id
  // DATA16  .t1
  // DATA16  .t2
  // DATA16  .t3
  // DATA16  .t4
// TAMEX4_HEADER  .trigger_window
  // DATA16  .post_trig_ns
  // DATA16  .pre_trig_ns
// TAMEX4_PADDING  .padding
// TAMEX4_SFP  .tamex[9]
  // DATA16  .trig
  // DATA32  .event_size
    // ---
  // raw_list_ii_zero_suppress  .time_coarse(DATA12)[1024]
  // raw_list_ii_zero_suppress  .time_fine(DATA12)[1024]
  // raw_list_ii_zero_suppress  .time_edge(DATA12)[1024]
  // raw_list_ii_zero_suppress  .time_channel(DATA12)[1024]
  // raw_list_ii_zero_suppress  .time_epoch(DATA32)[1024]
    // ---
  // TAMEX4_EPOCH_DATA  .epoch
  // TAMEX4_TIME_DATA  .time
// DATA12 .ts.subsystem_id
// DATA16 .ts.t1
// DATA16 .ts.t2
// DATA16 .ts.t3
// DATA16 .ts.t4
// DATA16 .trigger_window.post_trig_ns
// DATA16 .trigger_window.pre_trig_ns
// DATA16 .tamex[9].trig
// DATA12 .tamex[9].time_coarse[1024]
// DATA12 .tamex[9].time_fine[1024]
// DATA12 .tamex[9].time_edge[1024]
// DATA12 .tamex[9].time_channel[1024]
// 
// size= 1  chunks=36880  mem=36880  line=73760  total=-1574698496
// size= 2  chunks=36879  mem=73758  line=110637  total=-214674736
// size= 5  chunks=36875  mem=184375  line=221250  total=-430234592
// size=1024  chunks= 47  mem=48128  line=48175  total=1776694000
// size=4097  chunks= 11  mem=45067  line=45078  total=1662476640
// size=36873  chunks=  3  mem=110619  line=110622  total=-215227936
// size=36880  chunks=  1  mem=36880  line=36881  total=1360171280
// 
// corr structure: bplast_subev
  // DATA12 .ts.subsystem_id
  // DATA16 .ts.t1
  // DATA16 .ts.t2
  // DATA16 .ts.t3
  // DATA16 .ts.t4
  // DATA16 .trigger_window.post_trig_ns
  // DATA16 .trigger_window.pre_trig_ns
  // DATA16 .tamex[9].trig
  // DATA12 .tamex[9].time_coarse[1024]
  // DATA12 .tamex[9].time_fine[1024]
  // DATA12 .tamex[9].time_edge[1024]
  // DATA12 .tamex[9].time_channel[1024]
// .bplast_subev/36880/.ts/5/.subsystem_id
                          // .t1
                          // .t2
                          // .t3
                          // .t4
                    // .trigger_window/2/.post_trig_ns
                                      // .pre_trig_ns
                    // .tamex/36873/[9]/4097/.trig
                                          // .time_coarse/1024/[1024]
                                          // .time_fine/1024/[1024]
                                          // .time_edge/1024/[1024]
                                          // .time_channel/1024/[1024]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: bplast_subev
// .bplast_subev// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: bplast_subev
// .bplast_subev
// Corr struct for: fatima_tamex_subev
//  : public unpack_subevent_base
// ---
// TIMESTAMP_WHITERABBIT_EXTENDED  .ts
  // DATA16  .subsystem_id
  // DATA16  .t1
  // DATA16  .t2
  // DATA16  .t3
  // DATA16  .t4
// TAMEX4_SFP  .data[4]
  // DATA16  .trig
  // DATA32  .event_size
    // ---
  // raw_list_ii_zero_suppress  .time_coarse(DATA12)[1024]
  // raw_list_ii_zero_suppress  .time_fine(DATA12)[1024]
  // raw_list_ii_zero_suppress  .time_edge(DATA12)[1024]
  // raw_list_ii_zero_suppress  .time_channel(DATA12)[1024]
  // raw_list_ii_zero_suppress  .time_epoch(DATA32)[1024]
    // ---
  // TAMEX4_EPOCH_DATA  .epoch
  // TAMEX4_TIME_DATA  .time
// DATA16 .ts.subsystem_id
// DATA16 .ts.t1
// DATA16 .ts.t2
// DATA16 .ts.t3
// DATA16 .ts.t4
// DATA16 .data[4].trig
// DATA12 .data[4].time_coarse[1024]
// DATA12 .data[4].time_fine[1024]
// DATA12 .data[4].time_edge[1024]
// DATA12 .data[4].time_channel[1024]
// 
// size= 1  chunks=16393  mem=16393  line=32786  total=537460898
// size= 5  chunks=16389  mem=81945  line=98334  total=1611989262
// size=1024  chunks= 21  mem=21504  line=21525  total=352859325
// size=4097  chunks=  5  mem=20485  line=20490  total=335892570
// size=16388  chunks=  2  mem=32776  line=32778  total=537329754
// size=16393  chunks=  1  mem=16393  line=16394  total=268746842
// 
// corr structure: fatima_tamex_subev
  // DATA16 .ts.subsystem_id
  // DATA16 .ts.t1
  // DATA16 .ts.t2
  // DATA16 .ts.t3
  // DATA16 .ts.t4
  // DATA16 .data[4].trig
  // DATA12 .data[4].time_coarse[1024]
  // DATA12 .data[4].time_fine[1024]
  // DATA12 .data[4].time_edge[1024]
  // DATA12 .data[4].time_channel[1024]
// .fatima_tamex_subev/16393/.ts/5/.subsystem_id
                                // .t1
                                // .t2
                                // .t3
                                // .t4
                          // .data/16388/[4]/4097/.trig
                                               // .time_coarse/1024/[1024]
                                               // .time_fine/1024/[1024]
                                               // .time_edge/1024/[1024]
                                               // .time_channel/1024/[1024]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: fatima_tamex_subev
// .fatima_tamex_subev// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: fatima_tamex_subev
// .fatima_tamex_subev
// Corr struct for: unpack_event
//  : public unpack_event_base
// ---
// fatima_tamex_subev  .fatima
  //  : public unpack_subevent_base
  // ---
  // TIMESTAMP_WHITERABBIT_EXTENDED  .ts
    // DATA16  .subsystem_id
    // DATA16  .t1
    // DATA16  .t2
    // DATA16  .t3
    // DATA16  .t4
  // TAMEX4_SFP  .data[4]
    // DATA16  .trig
    // DATA32  .event_size
      // ---
    // raw_list_ii_zero_suppress  .time_coarse(DATA12)[1024]
    // raw_list_ii_zero_suppress  .time_fine(DATA12)[1024]
    // raw_list_ii_zero_suppress  .time_edge(DATA12)[1024]
    // raw_list_ii_zero_suppress  .time_channel(DATA12)[1024]
    // raw_list_ii_zero_suppress  .time_epoch(DATA32)[1024]
      // ---
    // TAMEX4_EPOCH_DATA  .epoch
    // TAMEX4_TIME_DATA  .time
// bplast_subev  .bplast
  //  : public unpack_subevent_base
  // ---
  // TIMESTAMP_WHITERABBIT  .ts
    // DATA12  .subsystem_id
    // DATA16  .t1
    // DATA16  .t2
    // DATA16  .t3
    // DATA16  .t4
  // TAMEX4_HEADER  .trigger_window
    // DATA16  .post_trig_ns
    // DATA16  .pre_trig_ns
  // TAMEX4_PADDING  .padding
  // TAMEX4_SFP  .tamex[9]
    // DATA16  .trig
    // DATA32  .event_size
      // ---
    // raw_list_ii_zero_suppress  .time_coarse(DATA12)[1024]
    // raw_list_ii_zero_suppress  .time_fine(DATA12)[1024]
    // raw_list_ii_zero_suppress  .time_edge(DATA12)[1024]
    // raw_list_ii_zero_suppress  .time_channel(DATA12)[1024]
    // raw_list_ii_zero_suppress  .time_epoch(DATA32)[1024]
      // ---
    // TAMEX4_EPOCH_DATA  .epoch
    // TAMEX4_TIME_DATA  .time
// DATA16 .fatima.ts.subsystem_id
// DATA16 .fatima.ts.t1
// DATA16 .fatima.ts.t2
// DATA16 .fatima.ts.t3
// DATA16 .fatima.ts.t4
// DATA16 .fatima.data[4].trig
// DATA12 .fatima.data[4].time_coarse[1024]
// DATA12 .fatima.data[4].time_fine[1024]
// DATA12 .fatima.data[4].time_edge[1024]
// DATA12 .fatima.data[4].time_channel[1024]
// DATA12 .bplast.ts.subsystem_id
// DATA16 .bplast.ts.t1
// DATA16 .bplast.ts.t2
// DATA16 .bplast.ts.t3
// DATA16 .bplast.ts.t4
// DATA16 .bplast.trigger_window.post_trig_ns
// DATA16 .bplast.trigger_window.pre_trig_ns
// DATA16 .bplast.tamex[9].trig
// DATA12 .bplast.tamex[9].time_coarse[1024]
// DATA12 .bplast.tamex[9].time_fine[1024]
// DATA12 .bplast.tamex[9].time_edge[1024]
// DATA12 .bplast.tamex[9].time_channel[1024]
// 
// size= 1  chunks=53273  mem=53273  line=106546  total=1381057762
// size= 2  chunks=53272  mem=106544  line=159816  total=-76056824
// size= 5  chunks=53264  mem=266320  line=319584  total=-154670752
// size=1024  chunks= 68  mem=69632  line=69700  total=-581839196
// size=4097  chunks= 16  mem=65552  line=65568  total=-801963232
// size=16388  chunks= 13  mem=213044  line=213057  total=-1534716327
// size=16393  chunks= 12  mem=196716  line=196728  total=1890356152
// size=36873  chunks=  4  mem=147492  line=147496  total=-732380184
// size=36880  chunks=  2  mem=73760  line=73762  total=-365444270
// size=53273  chunks=  1  mem=53273  line=53274  total=-1456901494
// 
// corr structure: unpack_event
  // DATA16 .fatima.ts.subsystem_id
  // DATA16 .fatima.ts.t1
  // DATA16 .fatima.ts.t2
  // DATA16 .fatima.ts.t3
  // DATA16 .fatima.ts.t4
  // DATA16 .fatima.data[4].trig
  // DATA12 .fatima.data[4].time_coarse[1024]
  // DATA12 .fatima.data[4].time_fine[1024]
  // DATA12 .fatima.data[4].time_edge[1024]
  // DATA12 .fatima.data[4].time_channel[1024]
  // DATA12 .bplast.ts.subsystem_id
  // DATA16 .bplast.ts.t1
  // DATA16 .bplast.ts.t2
  // DATA16 .bplast.ts.t3
  // DATA16 .bplast.ts.t4
  // DATA16 .bplast.trigger_window.post_trig_ns
  // DATA16 .bplast.trigger_window.pre_trig_ns
  // DATA16 .bplast.tamex[9].trig
  // DATA12 .bplast.tamex[9].time_coarse[1024]
  // DATA12 .bplast.tamex[9].time_fine[1024]
  // DATA12 .bplast.tamex[9].time_edge[1024]
  // DATA12 .bplast.tamex[9].time_channel[1024]
// .unpack_event/53273/.fatima/16393/.ts/5/.subsystem_id
                                        // .t1
                                        // .t2
                                        // .t3
                                        // .t4
                                  // .data/16388/[4]/4097/.trig
                                                       // .time_coarse/1024/[1024]
                                                       // .time_fine/1024/[1024]
                                                       // .time_edge/1024/[1024]
                                                       // .time_channel/1024/[1024]
                    // .bplast/36880/.ts/5/.subsystem_id
                                        // .t1
                                        // .t2
                                        // .t3
                                        // .t4
                                  // .trigger_window/2/.post_trig_ns
                                                    // .pre_trig_ns
                                  // .tamex/36873/[9]/4097/.trig
                                                        // .time_coarse/1024/[1024]
                                                        // .time_fine/1024/[1024]
                                                        // .time_edge/1024/[1024]
                                                        // .time_channel/1024/[1024]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: unpack_event
// .unpack_event// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: unpack_event
// .unpack_event
// Corr struct for: unpack_sticky_event
//  : public unpack_sticky_event_base
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: unpack_sticky_event
// .unpack_sticky_event// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: unpack_sticky_event
// .unpack_sticky_event// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: unpack_sticky_event
// .unpack_sticky_event

/** END_CORR_STRUCT ***************************************************/

