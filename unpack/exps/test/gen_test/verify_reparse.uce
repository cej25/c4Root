/** BEGIN_INPUT_DEFINITION *********************************************
 *
 * All specifications as seen by the parser.
 *
 * Do not edit - automatically generated.
 */

/**********************************************************
 * Dump of all structures:
 */

BAD_EVENT()
{
  MEMBER(DATA8 bad);
  UINT32 be NOENCODE
  {
     0_31: b = MATCH(0xbad00bad);
  }
  ENCODE(bad,(value=1));

}

DUMMY()
{
  UINT32 no NOENCODE;
}

FEBEX_EVENT(card)
{
  MEMBER(DATA8 trig);
  MEMBER(DATA32 event_trigger_time_hi);
  MEMBER(DATA32 event_trigger_time_lo);
  MEMBER(DATA16 hit_pattern);
  MEMBER(DATA16 channel_trigger_time_hi[16] ZERO_SUPPRESS);
  MEMBER(DATA32 channel_trigger_time_lo[16] ZERO_SUPPRESS);
  MEMBER(DATA8 pileup[16] ZERO_SUPPRESS);
  MEMBER(DATA8 overflow[16] ZERO_SUPPRESS);
  MEMBER(DATA8 channel_cfd[16] ZERO_SUPPRESS);
  MEMBER(DATA32 channel_energy[16] ZERO_SUPPRESS);
  UINT32 sumchannel NOENCODE
  {
     0_07: 52;
     8_11: trigger_type;
    12_15: sfpnr;
    16_23: card = MATCH(card);
    24_31: 255;
    ENCODE(trig,(value=trigger_type));
  }
  UINT32 channel_size NOENCODE
  {
     0_01: ignore;
     2_31: size;
  }
  UINT32 event_timestamp_hi NOENCODE
  {
     0_15: timestamp_hi;
    16_31: ignore;
    ENCODE(event_trigger_time_hi,(value=timestamp_hi));
  }
  UINT32 event_timestamp_lo NOENCODE
  {
     0_31: timestamp_lo;
    ENCODE(event_trigger_time_lo,(value=timestamp_lo));
  }
  UINT32 hp NOENCODE
  {
     0_15: hp;
    16_31: ignore;
    ENCODE(hit_pattern,(value=hp));
  }
  UINT32 deadbeef NOENCODE
  {
     0_31: 0xdeadbeef;
  }
  list(0<=index<((channel_size.size / 4) - 1))
  {
    UINT32 channelids NOENCODE
    {
       0_15: chan_ts_hi;
      16_23: channel_id_bits;
      24_31: 240;
      ENCODE(channel_trigger_time_hi[channelids.channel_id_bits],(value=chan_ts_hi));
    }
    UINT32 channel_ts NOENCODE
    {
       0_31: chan_ts_lo;
      ENCODE(channel_trigger_time_lo[channelids.channel_id_bits],(value=chan_ts_lo));
    }
    UINT32 chan_enrgy NOENCODE
    {
       0_23: chan_energy;
      24_29: TSF;
         30: pileup_flag;
         31: overflow_flag;
      ENCODE(channel_cfd[channelids.channel_id_bits],(value=TSF));
      ENCODE(channel_energy[channelids.channel_id_bits],(value=chan_energy));
      ENCODE(pileup[channelids.channel_id_bits],(value=pileup_flag));
      ENCODE(overflow[channelids.channel_id_bits],(value=overflow_flag));
    }
    UINT32 future_use NOENCODE
    {
       0_31: 0;
    }
  }
}

FEBEX_EVENT_TRACES(card)
{
  MEMBER(DATA8 trig);
  MEMBER(DATA32 event_trigger_time_hi);
  MEMBER(DATA32 event_trigger_time_lo);
  MEMBER(DATA16 hit_pattern);
  MEMBER(DATA32 num_channels_fired);
  MEMBER(DATA8 board_num);
  MEMBER(DATA8 channel_id[16] ZERO_SUPPRESS);
  MEMBER(DATA16 channel_trigger_time_hi[16] ZERO_SUPPRESS);
  MEMBER(DATA32 channel_trigger_time_lo[16] ZERO_SUPPRESS);
  MEMBER(DATA8 pileup[16]);
  MEMBER(DATA8 overflow[16]);
  MEMBER(DATA8 channel_cfd[16] ZERO_SUPPRESS);
  MEMBER(DATA32 channel_energy[16] ZERO_SUPPRESS);
  MEMBER(DATA16 traces[16][4000] ZERO_SUPPRESS);
  UINT32 sumchannel NOENCODE
  {
     0_07: 52;
     8_11: trigger_type;
    12_15: sfpnr;
    16_23: board_id = MATCH(card);
    24_31: 255;
    ENCODE(board_num,(value=board_id));
    ENCODE(trig,(value=trigger_type));
  }
  UINT32 channel_size NOENCODE
  {
     0_01: ignore;
     2_31: size;
    ENCODE(num_channels_fired,(value=((size / 4) - 1)));
  }
  UINT32 event_timestamp_hi NOENCODE
  {
     0_15: timestamp_hi;
    16_31: ignore;
    ENCODE(event_trigger_time_hi,(value=timestamp_hi));
  }
  UINT32 event_timestamp_lo NOENCODE
  {
     0_31: timestamp_lo;
    ENCODE(event_trigger_time_lo,(value=timestamp_lo));
  }
  UINT32 hp NOENCODE
  {
     0_15: hp;
    16_31: ignore;
    ENCODE(hit_pattern,(value=hp));
  }
  UINT32 deadbeef NOENCODE
  {
     0_31: 0xdeadbeef;
  }
  if((sumchannel.trigger_type == 1))
  {
    list(0<=index<((channel_size.size / 4) - 1))
    {
      UINT32 channelids NOENCODE
      {
         0_15: chan_ts_hi;
        16_23: channel_id_bits;
        24_31: 240;
        ENCODE(channel_id[index],(value=channel_id_bits));
        ENCODE(channel_trigger_time_hi[index],(value=chan_ts_hi));
      }
      UINT32 channel_ts NOENCODE
      {
         0_31: chan_ts_lo;
        ENCODE(channel_trigger_time_lo[index],(value=chan_ts_lo));
      }
      UINT32 chan_enrgy NOENCODE
      {
         0_23: chan_energy;
        24_29: TSF;
           30: pileup_flag;
           31: overflow_flag;
        ENCODE(channel_cfd[index],(value=TSF));
        ENCODE(channel_energy[index],(value=chan_energy));
        ENCODE(pileup[index],(value=pileup_flag));
        ENCODE(overflow[index],(value=overflow_flag));
      }
      UINT32 future_use NOENCODE
      {
         0_31: 0;
      }
    }
    list(0<=i<((channel_size.size / 4) - 1))
    {
      UINT32 header NOENCODE
      {
         0_07: 52;
         8_23: other;
        24_31: ch_id;
      }
      UINT32 tracesize NOENCODE
      {
         0_31: size;
      }
      UINT32 tracehead NOENCODE
      {
         0_23: other;
        24_31: head;
      }
      list(0<=j<((tracesize.size / 4) - 2))
      {
        UINT32 channel_trace NOENCODE
        {
           0_13: data1;
          14_15: stuff1;
          16_29: data2;
          30_31: stuff2;
          ENCODE(traces[header.ch_id][((2 * j) + 0)],(value=data1));
          ENCODE(traces[header.ch_id][((2 * j) + 1)],(value=data2));
        }
      }
      UINT32 trace_trailer NOENCODE
      {
         0_23: notused;
        24_31: id = RANGE(176,191);
      }
    }
  }
  else
  {
    if((sumchannel.trigger_type == 3))
    {
      select several
      {
        dummy = DUMMY();
      }
    }
  }
}

FEBEX_PADDING()
{
  UINT32 pads_data NOENCODE
  {
     0_11: counter;
    12_19: index;
    20_31: 0xadd;
  }
}

TAMEX4_EPOCH_DATA(sfp,card,time_coarse,time_fine,time_edge,time_channel,
                  time_epoch)
{
  MEMBER(DATA12 time_coarse[1024] NO_INDEX_LIST);
  MEMBER(DATA12 time_fine[1024] NO_INDEX_LIST);
  MEMBER(DATA12 time_edge[1024] NO_INDEX_LIST);
  MEMBER(DATA12 time_channel[1024] NO_INDEX_LIST);
  MEMBER(DATA32 time_epoch[1024] NO_INDEX_LIST);
  UINT32 data NOENCODE
  {
     0_27: epoch;
    28_31: 6;
    ENCODE(time_coarse APPEND_LIST,(value=0));
    ENCODE(time_fine APPEND_LIST,(value=0));
    ENCODE(time_edge APPEND_LIST,(value=0));
    ENCODE(time_channel APPEND_LIST,(value=0));
    ENCODE(time_epoch APPEND_LIST,(value=epoch));
  }
}

TAMEX4_HEADER()
{
  MEMBER(DATA16 post_trig_ns);
  MEMBER(DATA16 pre_trig_ns);
  UINT32 trigger_window NOENCODE
  {
     0_15: post_trig_ns;
    16_31: pre_trig_ns;
    ENCODE(post_trig_ns,(value=post_trig_ns));
    ENCODE(pre_trig_ns,(value=pre_trig_ns));
  }
}

TAMEX4_PADDING()
{
  UINT32 padding NOENCODE
  {
     0_11: counter;
    12_19: index;
    20_31: 0xadd;
  }
}

TAMEX4_SFP(sfp,card)
{
  MEMBER(DATA16 trig);
  MEMBER(DATA32 event_size);
  MEMBER(DATA12 time_coarse[1024] NO_INDEX_LIST);
  MEMBER(DATA12 time_fine[1024] NO_INDEX_LIST);
  MEMBER(DATA12 time_edge[1024] NO_INDEX_LIST);
  MEMBER(DATA12 time_channel[1024] NO_INDEX_LIST);
  MEMBER(DATA32 time_epoch[1024] NO_INDEX_LIST);
  UINT32 indicator NOENCODE
  {
     0_07: 52;
     8_11: trigger_type;
    12_15: sfp = MATCH(sfp);
    16_23: card = MATCH(card);
    24_31: 0;
  }
  MATCH_END;
  UINT32 data_size NOENCODE
  {
     0_31: bytes;
    ENCODE(event_size,(value=bytes));
  }
  UINT32 tdc_header NOENCODE
  {
     0_15: lec;
       16: buf_no;
    17_19: reserved;
    20_23: trigger_type;
    24_31: 170;
    ENCODE(trig,(value=trigger_type));
  }
  list(0<=i<((data_size.bytes / 4) - 3))
  {
    select
    {
      epoch = TAMEX4_EPOCH_DATA(sfp=sfp,card=card,time_coarse=time_coarse,
                                time_fine=time_fine,time_edge=time_edge,
                                time_channel=time_channel,time_epoch=time_epoch);
      time = TAMEX4_TIME_DATA(sfp=sfp,card=card,time_coarse=time_coarse,
                              time_fine=time_fine,time_edge=time_edge,
                              time_channel=time_channel,time_epoch=time_epoch);
    }
  }
  UINT32 error_bits NOENCODE
  {
     0_23: bits;
    24_31: 238;
  }
  UINT32 trailer NOENCODE
  {
     0_15: lec;
       16: buf_no;
    17_19: reserved;
    20_23: trigger_type;
    24_31: 187;
  }
}

TAMEX4_TIME_DATA(sfp,card,time_coarse,time_fine,time_edge,time_channel,
                 time_epoch)
{
  MEMBER(DATA12 time_coarse[1024] NO_INDEX_LIST);
  MEMBER(DATA12 time_fine[1024] NO_INDEX_LIST);
  MEMBER(DATA12 time_edge[1024] NO_INDEX_LIST);
  MEMBER(DATA12 time_channel[1024] NO_INDEX_LIST);
  MEMBER(DATA32 time_epoch[1024] NO_INDEX_LIST);
  UINT32 data NOENCODE
  {
     0_10: coarse;
       11: is_leading;
    12_21: fine;
    22_27: channel;
    28_31: type = CHECK(8);
    ENCODE(time_coarse APPEND_LIST,(value=coarse));
    ENCODE(time_fine APPEND_LIST,(value=fine));
    ENCODE(time_edge APPEND_LIST,(value=is_leading));
    ENCODE(time_channel APPEND_LIST,(value=channel));
    ENCODE(time_epoch APPEND_LIST,(value=0));
  }
}

TIMESTAMP_WHITERABBIT(id)
{
  MEMBER(DATA12 subsystem_id);
  MEMBER(DATA16 t1);
  MEMBER(DATA16 t2);
  MEMBER(DATA16 t3);
  MEMBER(DATA16 t4);
  UINT32 header NOENCODE
  {
     0_11: id = MATCH(id);
    12_15: 0;
       16: error_bit;
    17_31: 0;
    ENCODE(subsystem_id,(value=id));
  }
  UINT32 d1 NOENCODE
  {
     0_15: t1;
    16_31: 0x3e1;
    ENCODE(t1,(value=t1));
  }
  UINT32 d2 NOENCODE
  {
     0_15: t2;
    16_31: 0x4e1;
    ENCODE(t2,(value=t2));
  }
  UINT32 d3 NOENCODE
  {
     0_15: t3;
    16_31: 0x5e1;
    ENCODE(t3,(value=t3));
  }
  UINT32 d4 NOENCODE
  {
     0_15: t4;
    16_31: 0x6e1;
    ENCODE(t4,(value=t4));
  }
}

TIMESTAMP_WHITERABBIT_EXTENDED(id)
{
  MEMBER(DATA16 subsystem_id);
  MEMBER(DATA16 t1);
  MEMBER(DATA16 t2);
  MEMBER(DATA16 t3);
  MEMBER(DATA16 t4);
  UINT32 header NOENCODE
  {
     0_12: id = MATCH(id);
    13_15: 0;
       16: error_bit;
    17_31: 0;
    ENCODE(subsystem_id,(value=id));
  }
  UINT32 d1 NOENCODE
  {
     0_15: t1;
    16_31: 0x3e1;
    ENCODE(t1,(value=t1));
  }
  UINT32 d2 NOENCODE
  {
     0_15: t2;
    16_31: 0x4e1;
    ENCODE(t2,(value=t2));
  }
  UINT32 d3 NOENCODE
  {
     0_15: t3;
    16_31: 0x5e1;
    ENCODE(t3,(value=t3));
  }
  UINT32 d4 NOENCODE
  {
     0_15: t4;
    16_31: 0x6e1;
    ENCODE(t4,(value=t4));
  }
}

VME_CAEN_V1751(board)
{
  MEMBER(DATA8 board_id);
  MEMBER(DATA8 channels);
  MEMBER(DATA32 board_time);
  MEMBER(DATA32 channel_time[64] NO_INDEX_LIST);
  MEMBER(DATA16 chan_ext_time[64] NO_INDEX_LIST);
  MEMBER(DATA12 chan_fine_time[64] NO_INDEX_LIST);
  MEMBER(DATA16 qshort[64] NO_INDEX_LIST);
  MEMBER(DATA16 qlong[64] NO_INDEX_LIST);
  UINT32 board_agg_size NOENCODE
  {
     0_27: event_size;
    28_31: 10;
  }
  UINT32 board_details NOENCODE
  {
     0_07: channels;
     8_23: pattern;
    24_25: empty;
       26: board_fail;
    27_31: id = MATCH(board);
    ENCODE(channels,(value=channels));
    ENCODE(board_id,(value=id));
  }
  UINT32 board_agg_counter NOENCODE
  {
     0_22: counter;
    23_31: empty;
  }
  UINT32 board_agg_timetag NOENCODE
  {
     0_31: time_tag;
    ENCODE(board_time,(value=time_tag));
  }
  if((board_agg_size.event_size > 4))
  {
    list(0<=index<((board_agg_size.event_size - 4) / 6))
    {
      UINT32 channel_agg_size NOENCODE
      {
         0_21: size;
        22_27: empty;
        28_31: format;
      }
      UINT32 format_one NOENCODE
      {
         0_15: no_wave_samples;
        16_17: empty;
           18: ed;
        19_21: dp1;
        22_24: dp2;
        25_26: ap;
           27: es;
           28: ee;
           29: et;
           30: eq;
           31: dt;
      }
      if((channel_agg_size.format == 4))
      {
        UINT32 format_two NOENCODE
        {
           0_02: ex;
              3: pp;
              4: dm;
           5_07: interp;
           8_31: empty;
        }
        if((format_one.et == 1))
        {
          UINT32 channel_time_tag NOENCODE
          {
             0_31: time_tag;
            ENCODE(channel_time APPEND_LIST,(value=time_tag));
          }
        }
        if(((format_one.ee == 1) && (channel_agg_size.format == 4)))
        {
          if((format_two.ex == 0))
          {
            UINT32 extras NOENCODE
            {
               0_15: baseline;
              16_31: ext_time;
              ENCODE(chan_ext_time APPEND_LIST,(value=ext_time));
            }
          }
          else
          {
            if((format_two.ex == 1))
            {
              UINT32 extras NOENCODE
              {
                 0_15: flags;
                16_31: ext_time;
                ENCODE(chan_ext_time APPEND_LIST,(value=ext_time));
              }
            }
            else
            {
              if((format_two.ex == 2))
              {
                UINT32 extras NOENCODE
                {
                   0_09: fine_time;
                  10_15: flags;
                  16_31: ext_time;
                  ENCODE(chan_fine_time APPEND_LIST,(value=fine_time));
                  ENCODE(chan_ext_time APPEND_LIST,(value=ext_time));
                }
              }
              else
              {
                if((format_two.ex == 4))
                {
                  UINT32 extras NOENCODE
                  {
                     0_15: baseline;
                    16_26: fine_time;
                    27_31: flags;
                    ENCODE(chan_fine_time APPEND_LIST,(value=fine_time));
                  }
                }
                else
                {
                  if((format_two.ex == 5))
                  {
                    UINT32 extras NOENCODE
                    {
                       0_09: midscale;
                      10_19: sazc;
                      20_29: sbzc;
                         30: pp;
                         31: dm;
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        if((format_one.et == 1))
        {
          UINT32 channel_time_tag NOENCODE
          {
             0_31: time_tag;
            ENCODE(channel_time APPEND_LIST,(value=time_tag));
          }
        }
      }
      if((format_one.eq == 1))
      {
        UINT32 qdata NOENCODE
        {
           0_14: qshort;
             15: empty;
          16_31: qlong;
          ENCODE(qshort APPEND_LIST,(value=qshort));
          ENCODE(qlong APPEND_LIST,(value=qlong));
        }
      }
    }
  }
}

WR_MULTI()
{
  MEMBER(DATA32 time_hi);
  MEMBER(DATA32 time_lo);
  UINT32 hi NOENCODE
  {
     0_31: time;
    ENCODE(time_hi,(value=time));
  }
  UINT32 lo NOENCODE
  {
     0_31: time;
    ENCODE(time_lo,(value=time));
  }
}

SUBEVENT(bplast_subev)
{
  select optional
  {
    ts = TIMESTAMP_WHITERABBIT(id=0x500);
  }
  select optional
  {
    trigger_window = TAMEX4_HEADER();
  }
  select several
  {
    padding = TAMEX4_PADDING();
  }
  select several
  {
    tamex[0] = TAMEX4_SFP(sfp=0,card=0);
    tamex[1] = TAMEX4_SFP(sfp=0,card=1);
    tamex[2] = TAMEX4_SFP(sfp=0,card=2);
    tamex[3] = TAMEX4_SFP(sfp=0,card=3);
    tamex[4] = TAMEX4_SFP(sfp=0,card=4);
    tamex[5] = TAMEX4_SFP(sfp=0,card=5);
    tamex[6] = TAMEX4_SFP(sfp=0,card=6);
    tamex[7] = TAMEX4_SFP(sfp=0,card=7);
    tamex[8] = TAMEX4_SFP(sfp=0,card=8);
  }
}

SUBEVENT(fatima_tamex_subev)
{
  select optional
  {
    ts = TIMESTAMP_WHITERABBIT_EXTENDED(id=0x1600);
  }
  select several
  {
    data[0] = TAMEX4_SFP(sfp=0,card=0);
    data[1] = TAMEX4_SFP(sfp=0,card=1);
    data[2] = TAMEX4_SFP(sfp=0,card=2);
    data[3] = TAMEX4_SFP(sfp=0,card=3);
  }
}

/**********************************************************
 * The event definition:
 */

EVENT
{
  fatima = fatima_tamex_subev(type=10,subtype=1,procid=75,control=20);
  bplast = bplast_subev(type=10,subtype=1,procid=80,control=20);
  ignore_unknown_subevent;
}

/**********************************************************
 * The sticky_event definition:
 */

/**********************************************************
 * Signal name mappings:
 */

/**********************************************************/

/** END_INPUT_DEFINITION **********************************************/
